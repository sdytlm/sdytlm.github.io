---
layout: post
title: "Python: Data Structure"
date: 2015-04-12
comments: true
categories: python
tag: python
---

<!--more-->
### Functions on `list`

* **append(x)** 
Add an item to the end of the list. 
`a[len(a)] = x`

* **extend(L)**
Extend a list by appending all the items of given list `L`
`a[len(a):] = L`

* **insert(index, x)**
Insert `x` before `a[index]`

```
a.insert(0,x)         # Insert at the begining
a.insert(len(a),x)    # Insert at the end

```

* **remove(x)** 
Remove all values `x` from the list. If there is no value `x`, there will be an error

* **pop(index)**

Remove the item at the given position `index` in the list and return it.
But you can use `pop()` to return and remove the last item in the list

* **clear()**
Remove all items from the list

* **index(x)**
Return the index of value `x` in the list. There will be an error if no such item.

* **count(x)**
Return the nuber of times value `x` appears in the list

* **sort()**
Sort the items of the list in place

* **reverse()**
Reverse the items of list in place

* **copy()**
Return a copy of the list

``` python
>>> a = [66.25, 333, 333, 1, 1234.5]
>>> print(a.count(333), a.count('x'))
2 0

>>> a.insert(2, -1)        # add -1 before a[2]
>>> a.append(333)         # andd 333 in the end
[66.25,333,-1,333,1,1234.5,333]

>>> a.index(333)         # only search once
1
>>> a.remove(333)        # delete once from left
[66.25, -1, 333, 1, 1234.5, 333]

>>> a.reverse()
[333, 1234.5, 1, 333, -1, 66.25]

>>> a.sort()
[-1,1,66.25, 333, 333, 1234.5]

>>> a.pop()              # return and remove the last item
1234.5
>>> a
[-1,1,66.25,333,333]

```

> Every method has return value. `insert`,`remove` and `sort` will return `None`

### Using Lists as Stacks
Use `append()` and `pop()` to implement First in first out.

``` python
>>> stack = [3,4,5]
>>> stack.append(6)
>>> stack.append(7)
>>> stack
[3,4,5,6,7]
>>> stack.pop()
7
>>> stack
[3,4,5,6]
>>> stack.pop()
6
>>> stack.pop()
5
>>> stack
[3,4]
```

### Using Lists as Queues
To implement First in Last out, use `collections.deque`

``` python
>>> from collections import deque
>>> queue = deque(['Eric", "John", "Michael"])
>>> queue.append("Terry")        # Terry arrives 
>>> queue.append("Graham")       # Graham arrives
>>> queue.popleft()              # Eric left
'Eric'
>>> queue.popleft()              # John left
'John'
>>> queue
deque(['Michael', 'Terry', 'Graham'])
```
### List Comprehensions
You can do

``` python
>>> squares = []
>>> for x in range(10):
        squares.append(x**2)

>>> squares
[0,1,4,9,16,25,36,49,64,81]
```
or

``` python
>>> squares = [x**2 for x in range(10)]
```
Another Example:

``` python
>>> [(x,y) for x in [1,2,3] for y in [3,1,4] if x!=y]
[(1,3, (1,4), (2,3), (2,1), (2,4,) (3,1),(3,4)]
```
equivalent to

``` python
>>> combos = []
>>> for x in [1,2,3]:
        for(y in [3,1,4]:
            if x!=y:
                combs.append((x,y))
>>> combs
[(1,3),(1,4),(2,3),(2,1),(2,4),(3,1),(3,4)]
```
More Examples:

``` python
>>> vec = [-4,-2,0,2,4]
>>> # create a new list with values doubled
>>> [x*2 for x in vec]
[-8,-4,0,4,8]
>>> # filter the list to exclude negative nums
>>> [x for x in vec if x>=0]
[0,2,4]
>>> # call a method on each element
>>> freshfruit =['banana', 'loganberry','passion fruit']
>>> [weapon.strip() for weapon in freshfruit]
['banana','loganberry',passion fruit']
>>> create a 2-tuple, you must have `()`
>>> [(x, x**2) for x in range(6)]
[(0,0),(1,1),(2,4),(3,9),(4,16),(5,25)]
>>> # two 'for'
>>> vec = [[1,2,3],[4,5,6],[7,8,9]]
>>> [num for elem in vec for num in elem]
[1,2,3,4,5,6,7,8,9]

```

