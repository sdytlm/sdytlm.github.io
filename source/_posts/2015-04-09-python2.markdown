---
layout: post
title: "Python: Control Flow"
date: 2015-04-09
comments: true
categories: python
tag: python
---

### First Steps

``` python
>>> a,b = 0,1
>>> while b<10:
    print(b)
    a,b=b,a+b
``` 

> each line within a basic block must be idented by the same amount.

* Use keyword `end` to avoid the newline after output.

``` python
>>> a,b = 0,1
>>> while b<1000:
    print(b,end=',')     # specify what character is used after output.
    a,b = b,a+b
1,1,2,3,5,8,
```

<!--more-->

----
### If Statement

* `elif` and `else` part is optional

``` python
>>> x = int (input("Please enter an integer: "))  # Defulat input will return a string
Please enter an integer: 42
>> if x < 0:
        x = 0
    elif x == 0:
        print('Zero')
    elif x == 1:
        print('Single')
    else:
        print('More')
More
```

----
### For Statement

* Iterates the items of a `list` or `string` in the order they appear.

``` python
words = ['cat', 'window', 'defenestrate']   # list
>>> for w in words:
    print(w, len(w))
cat 3
window 6
defenestrate 12
```

* if you modify the sequence, you may create a dead loop program

``` python
>>> words = ['cat', 'window', 'defenestrate']
>>> for w in words[:]:        # word[:] will not make the program dead loop. If u use words, program will be dead loop
        if len(w) > 6:
            words.insert (0,w)
>>> words
['defenestrate', 'cat', 'window', 'defenestrate']
```
----
### `range()` Function
It can generates arithmetic progressions:
``` python
>>> for i in range(5)
>>>    print(i)
0
1
2
3
4
5

```
You can also specify the start index and step
``` python
>>> range(5,10)                  # 5,6,7,8,9
>>> range(0,10,3)                # 0,3,6,9
>>> range(-10,-100,-30)          # -10,-40,-70
```
You can combine `range()` and `len()`
``` python
>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
>>>   print(i,a[i])
0 Mary
1 had
2 a
3 little
4 lamb
```
----
### Break Statement

* Loop statement can have `else` clause. It is executed when loop terminates through exhaustion of list (`for`) or when condition becauses false (`while)

> `else` of loop statement cannot executed when loop is terminated by a `break` statement.

``` python
>>> for n in range(2,10):
>>>     for x in range(2,n):
>>>         if n%x == 0:
>>>             print(n, 'equals',x,'*', n//x)
>>>             break
>>>     else:  # look at this intentation
>>>         print(n, 'is a prime number')

2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
```

* `continue` statement continues with the next iteration of the loop

``` python
>>> for num in range (2,10):
>>>     if num % 2 == 0:
>>>         print("Found an even number", num)
>>>         continue                            # if 'if' is executed, the second print will not be executed.
>>>     print("Found a number", num)

Found an even number 2
Found a number 3
Found an even number 4
Found a number 5
Found an even number 6
Found a number 7
Found an even number 8
Found a number 9
```
