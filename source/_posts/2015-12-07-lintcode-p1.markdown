---
layout: post
title: "Anagrams"
date: 2015-12-07
comments: true
categories: LintCode
tag: LintCode
---

### Anagrams

`Given an array of strings, return all groups of strings that are anagrams.`

#### Example
Given ["lint", "intl", "inlt", "code"], return ["lint", "inlt", "intl"].

Given ["ab", "ba", "cd", "dc", "e"], return ["ab", "ba", "cd", "dc"].

#### Note
All inputs will be in lower-case

<!-- more -->

### Solution
* sorted_string: A list of sorted strings matching the input `strs`
For example: 

```
strs: = {"ab", "ba", "e"}
sorted_string: = {"ab", "ab", "e"}
```

* hash_map : `<sorted_string[i], NumofAppearance(sorted_string[i])> ` maintain how many times does each sorted string appear. 

  1. Sort each string from **strs** and put it into sorted_string
  2. Use the hash map to record how many times does sorted_string[i] appear.
  3. Chose the string which appear more than **2** times. Put it into result string

{% include_code Anagrams LintCode/Anagrams.py %}
