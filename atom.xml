<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[卖萌的弱渣]]></title>
  <link href="http://sdytlm.github.io/atom.xml" rel="self"/>
  <link href="http://sdytlm.github.io/"/>
  <updated>2015-04-11T16:16:37-07:00</updated>
  <id>http://sdytlm.github.io/</id>
  <author>
    <name><![CDATA[Min Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python: Control Flow]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/09/python2/"/>
    <updated>2015-04-09T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/09/python2</id>
    <content type="html"><![CDATA[<h3>First Steps</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">while</span> <span class="n">b</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<blockquote><p>each line within a basic block must be idented by the same amount.</p></blockquote>

<ul>
<li>Use keyword <code>end</code> to avoid the newline after output.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">while</span> <span class="n">b</span><span class="o">&lt;</span><span class="mi">1000</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">&#39;,&#39;</span><span class="p">)</span>     <span class="c"># specify what character is used after output.</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<hr />

<h3>If Statement</h3>

<ul>
<li><code>elif</code> and <code>else</code> part is optional</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span> <span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">&quot;Please enter an integer: &quot;</span><span class="p">))</span>  <span class="c"># Defulat input will return a string</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">an</span> <span class="n">integer</span><span class="p">:</span> <span class="mi">42</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Zero&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Single&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;More&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">More</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>For Statement</h3>

<ul>
<li>Iterates the items of a <code>list</code> or <code>string</code> in the order they appear.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;window&#39;</span><span class="p">,</span> <span class="s">&#39;defenestrate&#39;</span><span class="p">]</span>   <span class="c"># list</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">))</span>
</span><span class='line'><span class="n">cat</span> <span class="mi">3</span>
</span><span class='line'><span class="n">window</span> <span class="mi">6</span>
</span><span class='line'><span class="n">defenestrate</span> <span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>if you modify the sequence, you may create a dead loop program</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;window&#39;</span><span class="p">,</span> <span class="s">&#39;defenestrate&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">[:]:</span>        <span class="c"># word[:] will not make the program dead loop. If u use words, program will be dead loop</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">6</span><span class="p">:</span>
</span><span class='line'>            <span class="n">words</span><span class="o">.</span><span class="n">insert</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">w</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">words</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;defenestrate&#39;</span><span class="p">,</span> <span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;window&#39;</span><span class="p">,</span> <span class="s">&#39;defenestrate&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3><code>range()</code> Function</h3>

<p>It can generates arithmetic progressions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also specify the start index and step</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>                  <span class="c"># 5,6,7,8,9</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>                <span class="c"># 0,3,6,9</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span><span class="o">-</span><span class="mi">30</span><span class="p">)</span>          <span class="c"># -10,-40,-70</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can combine <code>range()</code> and <code>len()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Mary&#39;</span><span class="p">,</span> <span class="s">&#39;had&#39;</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;little&#39;</span><span class="p">,</span> <span class="s">&#39;lamb&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)):</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>   <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'><span class="mi">0</span> <span class="n">Mary</span>
</span><span class='line'><span class="mi">1</span> <span class="n">had</span>
</span><span class='line'><span class="mi">2</span> <span class="n">a</span>
</span><span class='line'><span class="mi">3</span> <span class="n">little</span>
</span><span class='line'><span class="mi">4</span> <span class="n">lamb</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Break Statement</h3>

<ul>
<li>Loop statement can have <code>else</code> clause. It is executed when loop terminates through exhaustion of list (<code>for</code>) or when condition becauses false (<code>while</code>)</li>
</ul>


<blockquote><p><code>else</code> of loop statement cannot executed when loop is terminated by a <code>break</code> statement.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>     <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>         <span class="k">if</span> <span class="n">n</span><span class="o">%</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>             <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s">&#39;equals&#39;</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="s">&#39;*&#39;</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>             <span class="k">break</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>     <span class="k">else</span><span class="p">:</span>  <span class="c"># look at this intentation</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>         <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s">&#39;is a prime number&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">prime</span> <span class="n">number</span>
</span><span class='line'><span class="mi">3</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">prime</span> <span class="n">number</span>
</span><span class='line'><span class="mi">4</span> <span class="n">equals</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">5</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">prime</span> <span class="n">number</span>
</span><span class='line'><span class="mi">6</span> <span class="n">equals</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">7</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">prime</span> <span class="n">number</span>
</span><span class='line'><span class="mi">8</span> <span class="n">equals</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">9</span> <span class="n">equals</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>continue</code> statement continues with the next iteration of the loop</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>     <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>         <span class="k">print</span><span class="p">(</span><span class="s">&quot;Found an even number&quot;</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>         <span class="k">continue</span>                            <span class="c"># if &#39;if&#39; is executed, the second print will not be executed.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="s">&quot;Found a number&quot;</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Found</span> <span class="n">an</span> <span class="n">even</span> <span class="n">number</span> <span class="mi">2</span>
</span><span class='line'><span class="n">Found</span> <span class="n">a</span> <span class="n">number</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Found</span> <span class="n">an</span> <span class="n">even</span> <span class="n">number</span> <span class="mi">4</span>
</span><span class='line'><span class="n">Found</span> <span class="n">a</span> <span class="n">number</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Found</span> <span class="n">an</span> <span class="n">even</span> <span class="n">number</span> <span class="mi">6</span>
</span><span class='line'><span class="n">Found</span> <span class="n">a</span> <span class="n">number</span> <span class="mi">7</span>
</span><span class='line'><span class="n">Found</span> <span class="n">an</span> <span class="n">even</span> <span class="n">number</span> <span class="mi">8</span>
</span><span class='line'><span class="n">Found</span> <span class="n">a</span> <span class="n">number</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Pass Statement</h3>

<p>It does nothing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span> <span class="c"># dead loop</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Define Functions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>      <span class="c"># write Fibonacci series</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'>        <span class="k">print</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="c"># Call the function</span>
</span><span class='line'>    <span class="n">fib</span><span class="p">(</span><span class="mi">2000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Execution of a function introduces a new symbol table for local variables. All function parameters will be stored in this table.</li>
<li>When you pass the arguments some values, the values are always the object <code>reference</code>  not the value of the object</li>
<li>A function definition introduces the function name in current symbol stable. You can also assign the function name to other parameter</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">fib</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="n">fib</span> <span class="n">at</span> <span class="mi">10042</span><span class="n">ed0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fib</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>                  <span class="c"># same as fib(100)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Actually, each function has a return value. At least it is <code>None</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets change the fib functions to store the reurn value temporally</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">fib2</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>     <span class="c"># store the result value</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>        <span class="c"># the method we use to add the </span>
</span><span class='line'>            <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f100</span> <span class="o">=</span> <span class="n">fib2</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>    <span class="c"># call the function</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f100</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">89</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Specify a default value for one or more arguments</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">ask_ok</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">retries</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">complaint</span><span class="o">=</span><span class="s">&#39;Yes or no, please!&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ok</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ok</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;y&#39;</span><span class="p">,</span><span class="s">&#39;ye&#39;</span><span class="p">,</span><span class="s">&#39;yes&#39;</span><span class="p">):</span>                  <span class="c"># in can test if ok is in a sequence</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ok</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;n&#39;</span><span class="p">,</span><span class="s">&#39;no&#39;</span><span class="p">,</span><span class="s">&#39;nop&#39;</span><span class="p">,</span><span class="s">&#39;nope&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">retries</span> <span class="o">=</span> <span class="n">retries</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">retries</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">OSError</span><span class="p">(</span><span class="s">&#39;uncooperative user&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">complaint</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The default value is evaluated only once.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">L</span><span class="o">=</span><span class="p">[]):</span>          <span class="c"># L = [] will only be done once.</span>
</span><span class='line'>        <span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">L</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t want the default to be shared.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">L</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">L</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>    <span class="c"># `is` </span>
</span><span class='line'>            <span class="n">L</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">L</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>More Function Parameter Rules</h3>

<ul>
<li>Keyword argument: <code>parrot(voltage=1000)</code></li>
<li>Positional argument: <code>parrot(1000)</code></li>
</ul>


<blockquote><p>If you have default parameter in your function. You can choose not to pass value to the default parameter. But you still need to pass values to other regular parameters.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="p">,</span> <span class="n">state</span> <span class="o">=</span><span class="s">&#39;a stiff&#39;</span><span class="p">,</span> <span class="n">actoon</span><span class="o">=</span><span class="s">&#39;voom&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;Blue&#39;</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function can be called as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>                                 <span class="c"># 1 positional argument</span>
</span><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>                         <span class="c"># 1 keyword argument</span>
</span><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span><span class="s">&#39;action=&#39;</span><span class="n">VBOOM</span><span class="s">&#39;)</span>
</span><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="s">&#39;VBoom&#39;</span><span class="p">,</span> <span class="n">voltage</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>         <span class="c"># The order of keyword parameter is not important</span>
</span><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="s">&#39;a million&#39;</span><span class="p">,</span> <span class="s">&#39;berere&#39;</span><span class="p">,</span> <span class="s">&#39;jump&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="s">&#39;a thousand&#39;</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="s">&#39;fdaf&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the following is not acceptable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">parrot</span><span class="p">()</span>      <span class="c"># require keyword argument</span>
</span><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span> <span class="s">&#39;dead&#39;</span><span class="p">)</span>    <span class="c"># After keyword argument, you must use keyword argument</span>
</span><span class='line'><span class="n">parrot</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="n">voltage</span><span class="o">=</span><span class="mi">220</span><span class="p">)</span>       <span class="c"># duplicate value for the same arguement</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You define <code>*name</code> and <code>**name</code>. But <code>*name</code> must be put before <code>**name</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="o">**</span><span class="n">keywords</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Do you have&quot;</span><span class="p">,</span> <span class="n">kind</span><span class="p">,</span> <span class="s">&quot;?&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">arguments</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">keywords</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>       <span class="c"># sort the dictionary</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">kw</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">kw</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">,</span> <span class="n">keywords</span><span class="p">[</span><span class="n">kw</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Call it like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">test</span><span class="p">(</span><span class="s">&quot;Limburger&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">&quot;It&#39;s very runny&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">&quot;It&#39;s very very runny&quot;</span>       <span class="c"># this two parameters will be sent to *arguments</span>
</span><span class='line'>     <span class="n">shopkeeper</span><span class="o">=</span><span class="s">&quot;Michael&quot;</span>
</span><span class='line'>     <span class="n">client</span><span class="o">=</span><span class="s">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">sketch</span><span class="o">=</span><span class="s">&quot;Cheese&quot;</span><span class="p">)</span>             <span class="c"># this three will be sent to **keywords </span>
</span></code></pre></td></tr></table></div></figure>


<p>It will display</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Do</span> <span class="n">you</span> <span class="n">have</span> <span class="n">Limburger</span><span class="err">?</span>
</span><span class='line'><span class="n">It</span><span class="s">&#39;s very runny,</span>
</span><span class='line'><span class="n">It</span><span class="s">&#39;s very very runny</span>
</span><span class='line'><span class="n">client</span><span class="p">:</span><span class="n">john</span>
</span><span class='line'><span class="n">shopkeeper</span><span class="p">:</span><span class="n">Michael</span>
</span><span class='line'><span class="n">sketch</span><span class="p">:</span><span class="n">Cheese</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Arbitrary argument, after <code>*args</code>, must use keywords rather than positional arguments.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">concat</span> <span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&quot;/&quot;</span><span class="p">):</span>          <span class="c"># after *args, you must use keywrod instead of positional arguments</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">concat</span><span class="p">(</span><span class="s">&quot;earth&quot;</span><span class="p">,</span> <span class="s">&quot;mars&quot;</span><span class="p">,</span> <span class="s">&quot;venus&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;earth/mars/venus&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">concat</span><span class="p">(</span><span class="s">&quot;earth&quot;</span><span class="p">,</span> <span class="s">&quot;mars&quot;</span><span class="p">,</span><span class="n">sp</span><span class="o">=</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;earth/mars/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Call function with unpacked arguments</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>    <span class="c"># normal call with separate arguments</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">))</span> <span class="c"># call with arguments unpacked</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>call function with dictionary to deliver arguments</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="k">def</span> <span class="nf">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="s">&#39;a stiff&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&#39;voom&#39;</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span><span class="p">{</span><span class="s">&quot;voltage&quot;</span><span class="p">:</span> <span class="s">&quot;four million&quot;</span><span class="p">,</span> <span class="s">&quot;state&quot;</span><span class="p">:</span> <span class="s">&quot;demised&quot;</span><span class="p">,</span> <span class="s">&quot;action&quot;</span><span class="p">:</span> <span class="s">&quot;voom&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">parrot</span><span class="p">(</span><span class="o">**</span><span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Opensuse Installation USB on MacOS]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/07/USB-BOOT-ISO/"/>
    <updated>2015-04-07T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/07/USB-BOOT-ISO</id>
    <content type="html"><![CDATA[<ol>
<li>Convert opensuse installtion ios to dmg</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hdiutil convert -format UDRW -o opensuse-13.01.img opensuse-13.01.iso</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Get the current device lists</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diskutil list
</span></code></pre></td></tr></table></div></figure>


<p>Remeber the current existing device number</p>

<ol>
<li>Insert USB</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diskutil list 
</span></code></pre></td></tr></table></div></figure>


<p>again and find the device node assigned to your usb ( e.g. /dev/disk1)</p>

<ol>
<li>Unmount your USB</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diskutil unmountDisk /dev/disk1</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Burn the flash</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo dd if=/your_img_location/opensuse-13.01.img of=/dev/rdisk1 bs=1m</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Ignore the pop-up window and run</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diskutil eject /dev/disk1</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Enjory it</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Nested KVM Virtualization]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/07/Install-Nested-Virtualization/"/>
    <updated>2015-04-07T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/07/Install-Nested-Virtualization</id>
    <content type="html"><![CDATA[<h3>Platform</h3>

<ul>
<li>Dom0: Opensuse 13.1</li>
<li>Host/Guest Hypervisor: KVM</li>
<li>Guest OS: CentOS</li>
</ul>


<!--more -->


<h3>Enable Nested in Host KVM</h3>

<ol>
<li>Check if nested is enabled in host hypervisor</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /sys/module/kvm_intel/parameters/nested</span></code></pre></td></tr></table></div></figure>


<p>if the result is <code>Y</code>. Nested virgualization in your host is open. Ohterwise you need to complete the followings</p>

<ol>
<li>`Modify /etc/default/grub</li>
</ol>


<blockquote><p>GRUB_CMDLINE_LINX = &ldquo;kvm-intel.nested=1 &rdquo;</p></blockquote>

<ol>
<li>Update grub</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grub2-mkconfig -o /boot/grub2/grub.cfg</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Reboot and check again</li>
</ol>


<h3>Install the guest Hypervisor</h3>

<p>I use the raw disk as the VM partition</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virt-install --name=centos5.6 --os-variant=RHEL5 --ram=1024 --vcpus=1 --disk path=/dev/sda4,format=raw,bus=virtio --accelerate --cdrom /Your DVD / --vnc --vncport=5910 --vnclisten=0.0.0.0 --network bridge=br0,model=virtio --noautoconsole
</span></code></pre></td></tr></table></div></figure>


<h3>Configure the Guest Hypervisor</h3>

<ul>
<li>Disable cache on guest disk
In xml file, do</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;driver name='qemu' type='raw' cache='none'/&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Enable VMX in guest CPU
In xml file, do</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cpu match='exact'&gt;
</span><span class='line'>  &lt;model&gt;core2duo&lt;/model&gt;
</span><span class='line'> &lt;feature policy='require' name='vmx'/&gt;
</span><span class='line'>&lt;/cpu&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Check guest CPU feature in host
In host OS</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps -ef | grep qemu-kvm</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Disable SELinux
In SELinux</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELINUX=permissive</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Configure network</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service NetworkManager stop
</span><span class='line'>chkconfig NetworkManager off
</span><span class='line'>chkconfig network on
</span><span class='line'>yum install bridge-utils
</span></code></pre></td></tr></table></div></figure>


<p>eth0:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE=eth0
</span><span class='line'>TYPE=Ethernet
</span><span class='line'>ONBOOT=yes
</span><span class='line'>NM_CONTROLLED=yes
</span><span class='line'>BRIDGE=br0</span></code></pre></td></tr></table></div></figure>


<p>br0</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE=br0
</span><span class='line'>NM_CONTROLLED=yes
</span><span class='line'>ONBOOT=yes
</span><span class='line'>TYPE=Bridge
</span><span class='line'>BOOTPROTO=dhcp</span></code></pre></td></tr></table></div></figure>


<p>reboot your computer</p>

<ul>
<li>Compile and Install QEMU</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install libvirt and management tool</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install libvirt-client virt-viewer guestfish libguestfs-tools virt-top libvrt python-virtinst </span></code></pre></td></tr></table></div></figure>


<ul>
<li>Launch libvirtd</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service libvirtd start
</span><span class='line'>chkconfig libvirtd on</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Check if libvirtd is turned on</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh list</span></code></pre></td></tr></table></div></figure>


<h3>Virsh Command</h3>

<ul>
<li>Launch a VM</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh start domain name</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Undefine a VM</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh destroy domain name
</span><span class='line'>virsh undefine domain name</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Connect a VM</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virt-viewer -c qemu:///system  domain name</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Delete a VM</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh destroy domain name
</span><span class='line'>virsh undefine domain name</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add VCPU to a VM</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh shutdown domain Name
</span><span class='line'>virsh edit domain name</span></code></pre></td></tr></table></div></figure>


<p>do this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>edit &lt;vcpu placement='static'&gt;4&lt;/vcpu&gt;
</span><span class='line'>virsh create /etc/libvirt/qemu/yourconfig.xml</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Introduction]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/06/python1/"/>
    <updated>2015-04-06T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/06/python1</id>
    <content type="html"><![CDATA[<h3>Study Resource</h3>

<ul>
<li>Python Official Document: <a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf">http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf</a></li>
<li>Python Standard Library: <a href="https://docs.python.org/2/library/index.html#library-index">https://docs.python.org/2/library/index.html#library-index</a></li>
<li>Python Official Tutorial: <a href="https://docs.python.org/2/tutorial/index.html">https://docs.python.org/2/tutorial/index.html</a></li>
</ul>


<h3>Features</h3>

<ul>
<li>Advancced Data Structure</li>
<li>Rely on <code>indentation</code>  (- -!)</li>
<li>No declaration for parameters</li>
</ul>


<!--more-->


<h3>Interpreter</h3>

<ul>
<li>Boot with a script</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">test</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Boot with command</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="n">command</span> <span class="p">[</span><span class="n">arg</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Boot with module</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">module</span> <span class="p">[</span><span class="n">arg</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Module name and command parameters are stored in <code>sys.argv[]</code></p></blockquote>

<ul>
<li><p>Make your python script executable</p>

<ul>
<li>Add the following in the first line</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#! /usr/bin/env python3.4</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Give your file execution permission</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">yourpython</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use special character encoding
Add the following in the first or second line for Windows 1252</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: cp-1252 -*-</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Basic Introduction</h3>

<h4>Number</h4>

<ul>
<li>Division will not dismiss fractional part</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">8</span><span class="o">/</span><span class="mi">5</span>
</span><span class='line'><span class="mf">1.6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If you do not like fractional part, use <code>//</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">//</span><span class="mi">3</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="o">//-</span><span class="mi">3</span>
</span><span class='line'><span class="o">-</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python will transfer int to float if your expression has both of them.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">*</span> <span class="mf">3.75</span> <span class="o">/</span> <span class="mf">1.5</span>
</span><span class='line'><span class="mf">7.5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mf">7.0</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="mf">3.5</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Assignment</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">10</span>          <span class="c"># Assign multiple var with same value</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
</span><span class='line'><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The last printed expression is assigned to the variable <code>_</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">tax</span> <span class="o">=</span> <span class="mf">12.5</span> <span class="o">/</span> <span class="mi">100</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">price</span> <span class="o">=</span> <span class="mf">100.50</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">price</span> <span class="o">*</span> <span class="n">tax</span>
</span><span class='line'><span class="mf">12.5625</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">price</span> <span class="o">+</span> <span class="n">_</span>
</span><span class='line'><span class="mf">113.0625</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">round</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="mf">113.06</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="sb">`_`</span> <span class="n">variable</span> <span class="ow">is</span> <span class="n">read</span><span class="o">-</span><span class="n">only</span> <span class="n">by</span> <span class="n">the</span> <span class="n">user</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can also do the multiple assignment</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>   <span class="c"># a=0, b=1</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Parameter</h4>

<blockquote><p>Must define the parameter before you access it</p></blockquote>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">n</span>
</span><span class='line'><span class="ne">NameError</span><span class="p">:</span> <span class="n">xxxxxxxxx</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>String</h4>

<p>String can be expressed in &lsquo; &rsquo; or &ldquo; &rdquo;</p>

<ul>
<li>If you use &ldquo; &lsquo; &rdquo; or &rsquo; &ldquo; &lsquo;, the inside quote will be considered quote. Otherwise, you need use <code>\</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;eggs&#39;</span>
</span><span class='line'><span class="s">&#39;spam eggs&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;doesn</span><span class="se">\&#39;</span><span class="s">t&#39;</span>     <span class="c"># use \&#39; to represent single quote because this is &#39; &#39; &#39;</span>
</span><span class='line'><span class="s">&quot;doesn&#39;t:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;&quot;Yes,&quot; he said.&#39;</span>  <span class="c"># you don&#39;t need \&quot; because it&#39;s &#39; &quot; &#39;</span>
</span><span class='line'><span class="s">&#39;&quot;Yes,&quot; he said.&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">Yes,</span><span class="se">\&quot;</span><span class="s"> he said.&quot;</span>  <span class="c"># you have to use \&quot; for &quot;, because this is &quot; &quot; &quot;</span>
</span><span class='line'><span class="s">&#39;&quot;Yes,&quot; he said.&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;&quot;Isn</span><span class="se">\&#39;</span><span class="s">t,&quot; she said,&#39;</span>
</span><span class='line'><span class="s">&#39;&quot;Isn</span><span class="se">\&#39;</span><span class="s">t,&quot; she said.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>print() will handle &lsquo;\&rsquo; as special character</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;&quot;Isn</span><span class="se">\&#39;</span><span class="s">t,&quot; she said.&#39;</span>
</span><span class='line'><span class="s">&#39;&quot;Isn</span><span class="se">\&#39;</span><span class="s">t,&quot; she said.&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;&quot;Isn&#39;</span>\<span class="n">t</span><span class="p">,</span><span class="s">&quot;she said.&#39;)</span>
</span><span class='line'><span class="s">&quot;Isn&#39;t,&quot;</span> <span class="n">she</span> <span class="n">said</span><span class="o">.</span>         <span class="c"># \ will not be displayed</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#39;First line, </span><span class="se">\n</span><span class="s">Second line.&#39;</span>
</span><span class='line'><span class="s">&#39;First line, </span><span class="se">\n</span><span class="s">Second line.&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="n">First</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'><span class="n">Second</span> <span class="n">line</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>If you want python accpet \, you need to add <code>r</code> before the first quote</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;C:\some</span><span class="se">\n</span><span class="s">ame&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">C</span><span class="p">:</span>\<span class="n">some</span>
</span><span class='line'><span class="n">ame</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">r&#39;C:\some\name&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">C</span><span class="p">:</span>\<span class="n">some</span>\<span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>print() can display multiple line by using &ldquo; &rdquo; &#8221;</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span><span class="se">\</span>
</span><span class='line'><span class="s">Usage: thingy</span>
</span><span class='line'><span class="s">       -h</span>
</span><span class='line'><span class="s">      -H</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output is the same format as this input</p>

<ul>
<li>String can be concatenated with <code>+</code> and repeated with <code>*</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">*</span> <span class="s">&#39;un&#39;</span> <span class="o">+</span> <span class="s">&#39;iun&#39;</span>
</span><span class='line'><span class="s">&#39;unununiun&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>String literals next to each other are automatically concatenated</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;Py&#39;</span> <span class="s">&#39;thon&#39;</span>
</span><span class='line'><span class="s">&#39;Python&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This automatical concatenation Cannot concatenate a variable and a string</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s">&#39;Py&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">prefix</span> <span class="s">&#39;thon&#39;</span>
</span><span class='line'><span class="ne">SyntaxError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">syntax</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <code>+</code> still works</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">prefix</span> <span class="o">=</span><span class="s">&#39;Py&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">prefix</span> <span class="o">+</span> <span class="s">&#39;thon&#39;</span>
</span><span class='line'><span class="s">&#39;Python&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>String can be indexed starting from 0. string[0] is also string type</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span> <span class="o">=</span> <span class="s">&quot;Python&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;P&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Indices may also be negative numbers which start counting from the <code>right</code>, negative indices starts from <code>-1</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;n&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;o&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;P&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Slicing is supported in string. We can get substring by slicing</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="o">=</span><span class="s">&#39;Python&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>    <span class="c"># get characters [0,2)</span>
</span><span class='line'><span class="s">&#39;Py&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Py&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">4</span><span class="p">:]</span>    <span class="c"># get characters [4,length]</span>
</span><span class='line'><span class="s">&#39;on&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'><span class="s">&#39;on&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">word</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'><span class="s">&#39;Python&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Attempting to use a index that is too large will result in error</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="o">=</span><span class="s">&#39;Python&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">42</span><span class="p">]</span>
</span><span class='line'><span class="ne">IndexError</span><span class="p">:</span> <span class="n">string</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span>
</span></code></pre></td></tr></table></div></figure>


<p>But slice index is ok for this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="o">=</span><span class="s">&#39;Python&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">42</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;on&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">42</span><span class="p">:]</span>
</span><span class='line'><span class="s">&#39; &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python strings cannot be changed</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;J&#39;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;str&#39;</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">support</span> <span class="n">item</span> <span class="n">assign</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>If you need a different string, you have to create a new one</p></blockquote>

<ul>
<li>Function <code>len()</code> returns the length of a string</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#39;abcdefg&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Lists</h4>

<ul>
<li>Lists can contain items of different types, but usually the items have the same type</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Lists can also be indexed and sliced:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">square</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="mi">25</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span>            <span class="o">//</span> <span class="nb">slice</span> <span class="n">will</span> <span class="k">return</span> <span class="n">a</span> <span class="n">new</span> <span class="nb">list</span>
</span><span class='line'><span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>List can also be concatenated</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">+</span> <span class="p">[</span><span class="mi">36</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">81</span><span class="p">,</span><span class="mi">100</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">81</span><span class="p">,</span><span class="mi">100</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Strings cannot be changed, but list can be changed</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cubes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mi">125</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cubes</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">64</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cubes</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">125</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can add new items at the ned of list by append()</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cubes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">125</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cubes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">216</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cubes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">7</span><span class="o">**</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cubes</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">125</span><span class="p">,</span><span class="mi">216</span><span class="p">,</span><span class="mi">343</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can even change the size of list or clear it by assignment to slices</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">,</span><span class="s">&#39;d&#39;</span><span class="p">,</span><span class="s">&#39;e&#39;</span><span class="p">,</span><span class="s">&#39;f&#39;</span><span class="p">,</span><span class="s">&#39;g&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;C&#39;</span><span class="p">,</span><span class="s">&#39;D&#39;</span><span class="p">,</span><span class="s">&#39;E&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;C&#39;</span><span class="p">,</span><span class="s">&#39;D&#39;</span><span class="p">,</span><span class="s">&#39;E&#39;</span><span class="p">,</span><span class="s">&#39;f&#39;</span><span class="p">,</span><span class="s">&#39;g&#39;</span><span class="p">]</span>
</span><span class='line'><span class="c"># remove them</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;f&#39;</span><span class="p">,</span><span class="s">&#39;g&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span>
</span><span class='line'><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>len()</code> can applies to lists</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">,</span><span class="s">&#39;d&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A lists can contain other lists</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">n</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
</span><span class='line'><span class="p">[[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>                 <span class="c"># like two dimention array</span>
</span><span class='line'><span class="s">&#39;b&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile Linux Kernel]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/06/compile-kernel/"/>
    <updated>2015-04-06T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/06/compile-kernel</id>
    <content type="html"><![CDATA[<ul>
<li></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /boot/config-3.4-desktop ~/Download/linux-3.10/
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<ul>
<li></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make menuconfig
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>User a proper configuration file</p></li>
<li></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<ul>
<li></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make modules</span></code></pre></td></tr></table></div></figure>


<ul>
<li></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make modules_install</span></code></pre></td></tr></table></div></figure>


<ul>
<li></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update grub</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grub2-mkconfig -o /boot/grub2/grub.cfg
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>Usually, you don&rsquo;t need to do this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operating System III: X86 and PC Architecture]]></title>
    <link href="http://sdytlm.github.io/blog/2015/02/01/os3/"/>
    <updated>2015-02-01T00:00:00-08:00</updated>
    <id>http://sdytlm.github.io/blog/2015/02/01/os3</id>
    <content type="html"><![CDATA[<h3>Registers</h3>

<table>
<thead>
<tr>
<th><strong>Name</strong>  </th>
<th>     </th>
<th> <strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CS   </td>
<td>   </td>
<td> code segment, for fetches via <strong>IP</strong></td>
</tr>
<tr>
<td>SS   </td>
<td>   </td>
<td> stack segment, for load/store via <strong>SP</strong> and <strong>BP</strong></td>
</tr>
<tr>
<td>DS   </td>
<td>   </td>
<td> data segment, for load/store via other registers</td>
</tr>
<tr>
<td>ES   </td>
<td>   </td>
<td> another data segment, <strong>destination for string operationgs</strong></td>
</tr>
<tr>
<td>SP   </td>
<td>   </td>
<td> stack pointer</td>
</tr>
<tr>
<td>BP   </td>
<td>   </td>
<td> frame base pointer</td>
</tr>
<tr>
<td>SI   </td>
<td>   </td>
<td> source index</td>
</tr>
<tr>
<td>DI   </td>
<td>   </td>
<td> destination index</td>
</tr>
<tr>
<td>IP   </td>
<td>   </td>
<td> instruction pointer</td>
</tr>
</tbody>
</table>


<!--more-->


<blockquote><p>IP increment after running each instruction. CALL REt, JMP can modify it.</p></blockquote>

<hr />

<h3>I/O</h3>

<ul>
<li>Only 1024 I/O addresses</li>
<li>Accessed with special instruction (<strong>IN, OUT</strong>)</li>
<li>Example: write a byte to line printer;</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define DATA_PORT    0x378</span>
</span><span class='line'><span class="cp">#define STATUS_PORT  0x379</span>
</span><span class='line'><span class="cp">#define   BUSY 0x80</span>
</span><span class='line'><span class="cp">#define CONTROL_PORT 0x37A</span>
</span><span class='line'><span class="cp">#define   STROBE 0x01</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">lpt_putc</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* wait for printer to consume previous byte */</span>
</span><span class='line'>  <span class="k">while</span><span class="p">((</span><span class="n">inb</span><span class="p">(</span><span class="n">STATUS_PORT</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">BUSY</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* put the byte on the parallel lines */</span>
</span><span class='line'>  <span class="n">outb</span><span class="p">(</span><span class="n">DATA_PORT</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* tell the printer to look at the data */</span>
</span><span class='line'>  <span class="n">outb</span><span class="p">(</span><span class="n">CONTROL_PORT</span><span class="p">,</span> <span class="n">STROBE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">outb</span><span class="p">(</span><span class="n">CONTROL_PORT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>MMIO</h3>

<ul>
<li>Use normal physical memory address

<ul>
<li>Limited size of I/O address space</li>
<li>No need instructions</li>
<li>System controller routes to appropriate device</li>
</ul>
</li>
<li>Work like &ldquo;magic&rdquo; memory

<ul>
<li><strong>Addressed</strong> and <strong>accessed</strong> like memory, but does not behave like memory</li>
<li>Reads and writes can have &ldquo;side effects&rdquo;</li>
<li>Read results can change due to external events</li>
</ul>
</li>
</ul>


<blockquote><p>side effect 是指：访问I/O寄存器时，不仅仅会像访问普通内存一样影响存储单元的值，更重要的是它可能改变CPU的I/O端口电平、输出时序或CPU对I/O端口电平的反应等等，从而实现CPU的控制功能。CPU在电路中的意义就是实现其side effect 。举个例子，有些设备的中断状态寄存器只要一读取，便自动清零。</p></blockquote>

<hr />

<h3>Translate virtual address to physical address</h3>

<ul>
<li><strong>pa = va + seg*16</strong>. e.g. set CS = 4096 to execute starting at 65536</li>
<li>Can&rsquo;t use the 16-bit address of a <strong>stack variable</strong> as a pointer</li>
<li><strong>0x66/0x67</strong> can switch between 16-bit and 32bit
For example:</li>
</ul>


<blockquote><p>in 32-bit mode, MOVW is expressed as 0x66 MOVW</p></blockquote>

<hr />

<h3>Instruction encoding</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b8</span> <span class="n">cd</span> <span class="n">ab</span>       <span class="mi">16</span><span class="o">-</span><span class="n">bit</span> <span class="n">CPU</span><span class="p">,</span>  <span class="n">AX</span> <span class="o">&lt;-</span> <span class="mh">0xabcd</span>
</span><span class='line'><span class="n">b8</span> <span class="mi">34</span> <span class="mi">12</span> <span class="n">cd</span> <span class="n">ab</span>       <span class="mi">32</span><span class="o">-</span><span class="n">bit</span> <span class="n">CPU</span><span class="p">,</span> <span class="n">EAX</span> <span class="o">&lt;-</span> <span class="mh">0xabcd1234</span>
</span><span class='line'><span class="mi">66</span> <span class="n">b8</span> <span class="n">cd</span> <span class="n">ab</span>      <span class="mi">32</span><span class="o">-</span><span class="n">bit</span> <span class="n">CPU</span><span class="p">,</span>  <span class="n">AX</span> <span class="o">&lt;-</span> <span class="mh">0xabcd</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>x86 Physical Memory</h3>

<ul>
<li>Reset or power-on jumps to ROM at <strong>0xfffffff0</strong> (so must be ROM at top&hellip;)</li>
<li>Write to VGA memory appear on the screen</li>
</ul>


<p><img src="https://copy.com/ydV77i6vO20CO3Ks" alt="image" /></p>

<hr />

<h3>ATT Syntax</h3>

<blockquote><p><strong>Operation  stc, dest</strong></p></blockquote>

<p>For example</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>ATT syntax</strong> </th>
<th style="text-align:left;"> <strong>Introduction</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> movl %eax, %edx </td>
<td style="text-align:left;">  edx = eax </td>
</tr>
<tr>
<td style="text-align:left;"> movl $0x123, %edx </td>
<td style="text-align:left;"> edx = 0x123 </td>
</tr>
<tr>
<td style="text-align:left;"> movl 0x123, %edx </td>
<td style="text-align:left;"> edx = * (int32_t)0x123 </td>
</tr>
<tr>
<td style="text-align:left;"> movl (%ebx), %edx </td>
<td style="text-align:left;"> edx = * (int32_t)ebx </td>
</tr>
<tr>
<td style="text-align:left;"> movl 4(%ebx), %edx </td>
<td style="text-align:left;"> edx = * (int32_t)(ebx+4) </td>
</tr>
</tbody>
</table>


<h3>Gcc x86 Calling Conventions</h3>

<ul>
<li>X86 stack <strong>grows down</strong>
Examples:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pushl</span> <span class="o">%</span><span class="n">eax</span>      <span class="c1">// subl $4, %esp</span>
</span><span class='line'>                <span class="c1">// movl %eax, (%esp)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">popl</span> <span class="o">%</span><span class="n">eax</span>       <span class="c1">// movl (%esp), %eax</span>
</span><span class='line'>                <span class="c1">// addl $4, %esp</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">call</span> <span class="mh">0x12345</span>    <span class="c1">// pushl %eip</span>
</span><span class='line'>                <span class="c1">// movl $0x12345, %eip</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ret</span>             <span class="c1">// popl %eip</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>How the stack is used between caller and callee</h3>

<ul>
<li>Just after call</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Register or address in stack</strong> </th>
<th style="text-align:left;"> <strong>What is stored</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> %eip </td>
<td style="text-align:left;"> The first instruction of callee </td>
</tr>
<tr>
<td style="text-align:left;"> %esp + 4 </td>
<td style="text-align:left;"> First argument </td>
</tr>
<tr>
<td style="text-align:left;"> %esp </td>
<td style="text-align:left;"> Return address </td>
</tr>
</tbody>
</table>


<ul>
<li>After ret instruction</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Register or address in the stack</strong> </th>
<th style="text-align:left;"> <strong>What is stored</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> %eip </td>
<td style="text-align:left;"> Contains the return address </td>
</tr>
<tr>
<td style="text-align:left;"> %esp </td>
<td style="text-align:left;"> Points at arguments pushed by caller </td>
</tr>
<tr>
<td style="text-align:left;"> %eax (and %edx if 64-bit) </td>
<td style="text-align:left;"> Return value </td>
</tr>
<tr>
<td style="text-align:left;"> %ebp, %ebx, %esi, %edi </td>
<td style="text-align:left;"> contain contents from the time of call </td>
</tr>
</tbody>
</table>


<ul>
<li><p>Terminology:</p>

<ul>
<li>%eax, %ecx, %edx: caller save register, that is caller should save them before call</li>
<li>%ebp, %ebx, %esi: callee save register</li>
</ul>
</li>
<li><p>Each function has a stack frame marked by <strong>%ebp, %esp</strong></p></li>
</ul>


<p><img src="https://copy.com/CfzaIS1btfMdlBui" alt="image" /></p>

<p>To keep this contract, we need to prologue and epilogue</p>

<p><strong>Prologue</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pushl</span> <span class="o">%</span><span class="n">ebp</span>        <span class="c1">// push current ebp</span>
</span><span class='line'><span class="n">movl</span> <span class="o">%</span><span class="n">esp</span><span class="p">,</span> <span class="o">%</span><span class="n">ebp</span>   <span class="c1">// ebp = esp, ebp point to the next address of saved %ebp</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>%esp: Always point to the bottom of stack
  %ebp: Point to the stack bottom of caller function. ebp is used before <strong>ret</strong></p></blockquote>

<p><strong>Epiloge</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">movl</span> <span class="o">%</span><span class="n">ebp</span><span class="p">,</span> <span class="o">%</span><span class="n">esp</span>     <span class="c1">// esp = ebp, then after that esp point to the bottom of caller&#39;s stack</span>
</span><span class='line'><span class="n">pop</span> <span class="o">%</span><span class="n">ebp</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>C -> Assembly</h3>

<p><strong>C code:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">g</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">g</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="mi">3</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assembly code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">_main</span><span class="p">:</span>
</span><span class='line'>          <span class="c1">// prologue</span>
</span><span class='line'>          <span class="n">pushl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>          <span class="n">movl</span> <span class="o">%</span><span class="n">esp</span><span class="p">,</span> <span class="o">%</span><span class="n">ebp</span>     <span class="c1">// esp: always the bottom of stack, ebp: 用来保存上个func的esp, 已被返回时使用</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// body</span>
</span><span class='line'>          <span class="n">pushl</span> <span class="err">$</span><span class="mi">8</span>            <span class="c1">// parameter</span>
</span><span class='line'>          <span class="n">call</span> <span class="n">_f</span>
</span><span class='line'>          <span class="n">addl</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//epilogue</span>
</span><span class='line'>          <span class="n">movl</span> <span class="o">%</span><span class="n">ebp</span><span class="p">,</span> <span class="o">%</span><span class="n">esp</span>
</span><span class='line'>          <span class="n">popl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>          <span class="n">ret</span>
</span><span class='line'>      <span class="nl">_f</span><span class="p">:</span>
</span><span class='line'>          <span class="c1">// prologue</span>
</span><span class='line'>          <span class="n">pushl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>          <span class="n">movl</span> <span class="o">%</span><span class="n">esp</span><span class="p">,</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// body</span>
</span><span class='line'>          <span class="n">pushl</span> <span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">esp</span><span class="p">)</span>
</span><span class='line'>          <span class="n">call</span> <span class="n">_g</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// epilogue</span>
</span><span class='line'>          <span class="n">movl</span> <span class="o">%</span><span class="n">ebp</span><span class="p">,</span> <span class="o">%</span><span class="n">esp</span>
</span><span class='line'>          <span class="n">popl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>          <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'>      <span class="nl">_g</span><span class="p">:</span>
</span><span class='line'>          <span class="c1">// prologue</span>
</span><span class='line'>          <span class="n">pushl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>          <span class="n">movl</span> <span class="o">%</span><span class="n">esp</span><span class="p">,</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// save %ebx</span>
</span><span class='line'>          <span class="n">pushl</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// body</span>
</span><span class='line'>          <span class="n">movl</span> <span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">ebp</span><span class="p">),</span> <span class="o">%</span><span class="n">ebx</span> <span class="c1">// why %ebp not %esp, because you push %ebx, then %esp will be added 4</span>
</span><span class='line'>          <span class="n">addl</span> <span class="err">$</span><span class="mi">3</span><span class="p">,</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>          <span class="n">movl</span> <span class="o">%</span><span class="n">ebx</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// restore %ebx</span>
</span><span class='line'>          <span class="n">popl</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//epilogue</span>
</span><span class='line'>          <span class="n">movl</span> <span class="o">%</span><span class="n">ebp</span><span class="p">,</span> <span class="o">%</span><span class="n">esp</span>
</span><span class='line'>          <span class="n">popl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>          <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mit6.828 Homework: Shell]]></title>
    <link href="http://sdytlm.github.io/blog/2015/01/17/shell/"/>
    <updated>2015-01-17T00:00:00-08:00</updated>
    <id>http://sdytlm.github.io/blog/2015/01/17/shell</id>
    <content type="html"><![CDATA[<h3>常用Shell 命令</h3>

<ol>
<li><code>ls &gt; y</code>
 把ls结果输出到文件y中</li>
<li><code>cat</code>
 cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用

<ul>
<li>一次显示整个文件:<code>cat filename</code></li>
<li>从键盘创建一个文件:<code>cat &gt; filename</code> 只能创建新文件,不能编辑已有文件</li>
<li>将几个文件合并为一个文件:<code>cat file1 file2 &gt; file</code></li>
</ul>
</li>
<li><code>uniq</code>
 uniq命令常用语报告或者消除文件中的重复内容，一般与sort命令结合使用</li>
<li><code>wc</code>
 wc命令的功能为统计指定文件中的字节数、字数、行数, 并将统计结果显示输出</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls &gt; y
</span><span class='line'>cat &lt; y | sort | uniq | wc &gt; y1</span></code></pre></td></tr></table></div></figure>


<blockquote><p>功能：把当前目录ls的结果存到y中,然后读取y的内容，然后将y的内容排序，去掉重复，然后统计字数，行数.并把结果保存到y1</p></blockquote>

<!--more-->


<hr />

<h3>什么是Unix Pipeline</h3>

<p>举个例子：
<code>ls -1 | grep p | more</code>
只列出来还有字母p的当前目录下的文件</p>

<p>Pipeline 使用&#8221;|&ldquo;来区分多个命令，从左到右，前一个命令的结果是后一个命令的输入</p>

<hr />

<h3>sh.c 数据结构</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="p">{...}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">execcmd</span><span class="p">{...}</span>  <span class="c1">// 普通指令</span>
</span><span class='line'><span class="k">struct</span> <span class="n">redicmd</span><span class="p">{...}</span>  <span class="c1">// 有重定向的指令</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pipecmd</span><span class="p">{...}</span>  <span class="c1">// pipe指令</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>sh.c 函数</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">runcmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getcmd</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nbuf</span><span class="p">)</span> <span class="c1">// 检测输入是否是标准输入流stdin，然后把用户输入存到buffer里</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">execcmd</span><span class="p">()</span> <span class="c1">// 为一个cmd数据结构分配内存</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">redircmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">subcmd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">pipecmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">left</span><span class="p">,</span> <span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">gettoken</span><span class="p">(</span><span class="n">chasr</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">q</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">eq</span><span class="p">)</span> <span class="c1">// 把地址ps到es的字符串中的变量找到，并存到q到eq的地址去</span>
</span><span class='line'><span class="kt">int</span> <span class="n">peek</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">toks</span><span class="p">)</span> <span class="c1">//判断从地址ps到es的字符串是否含有toks里面的字符</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">mkcopy</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span> <span class="c1">// s指向需要拷贝的字符串头，es指向需要拷贝的字符串结尾. 这个函数拷贝从s到es的字符串，然后返回拷贝的地址。</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parsecmd</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="c1">// 解析命令把buffer里的命令包装成可执行的数据结构struct cmd</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parseline</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parsepipe</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parsedirs</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parseexec</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用到的C和操作系统函数</h3>

<ul>
<li><p>strchr
函数原型：extern char <em>strchr(char </em>str,char character)
参数说明：str为一个字符串的指针，character为一个待查找字符。
所在库名：#include <code>&lt;string.h&gt;</code>
函数功能：从字符串str中寻找字符character第一次出现的位置。</p></li>
<li><p>execv
函数原型：execv(char<em> cmd, char </em>argv[]);
函数说明：execv 本质上是执行命令 cmd, *argv[] 是包括argv[0]的参数
举例：
  <code>c
  execv(argv[0], argv);
 </code></p></li>
<li><p>open
 函数原型：int open(const char *pathname, int flags, mode_t mode);
 函数说明：</p>

<ul>
<li>creates a new open file description, an entry in the system-wide  table of       open files. The new open file description is initially not shared with any       other process, but  sharing  may  arise  via <strong>fork</strong></li>
<li>parameter <strong>flags</strong> must include one of the following access modes:              O_RDONLY, O_WRONLY, or O_RDWR.</li>
<li><strong>mode</strong>: 创建文件时设定的其他用户权限: S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
<code>举例说明</code>：</li>
<li>打开一个新文件用来写入</li>
</ul>


<pre><code class="`` c">  #include &lt;fcntl.h&gt;
  int fd;
  mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
  char *filename = "/tmp/file";
  fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, mode);
</code></pre>

<blockquote><p>当打开的文件不存在时 <strong>flag</strong> 必须有O_CREATE, 打开已存在文件则不需要.</p></blockquote></li>
<li><p>dup
  函数原型: int dup(int oldfd);
  函数说明: create a copy of the file descriptor oldfd</p>

<blockquote><p>dup uses the lowest-numbered unused descriptor for the new descriptor.</p></blockquote></li>
</ul>


<h3>关键部分代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">runcmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">execcmd</span> <span class="o">*</span><span class="n">ecmd</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">pipecmd</span> <span class="o">*</span><span class="n">pcmd</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">redircmd</span> <span class="o">*</span><span class="n">rcmd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">cmdPath</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;/bin/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">cmd</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">){</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;unknown runcmd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="sc">&#39; &#39;</span><span class="o">:</span>                       <span class="c1">// 普通命令</span>
</span><span class='line'>      <span class="n">ecmd</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">execcmd</span><span class="o">*</span><span class="p">)</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Your code here ...</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">execv</span><span class="p">(</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// 到/bin目录中找命令</span>
</span><span class='line'>          <span class="kt">char</span> <span class="n">cmdPath</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;/bin/&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">strcat</span><span class="p">(</span><span class="n">cmdPath</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">execv</span><span class="p">(</span><span class="n">cmdPath</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>   <span class="c1">// test /bin/cmd</span>
</span><span class='line'>              <span class="kt">char</span> <span class="n">cmdPath2</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;/usr/bin/&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="n">strcat</span><span class="p">(</span><span class="n">cmdPath2</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>   <span class="c1">// test /usr/bin/cmd (e.g.sort)</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">execv</span><span class="p">(</span><span class="n">cmdPath2</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Command %s not found</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>              <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>                       <span class="c1">// 重定向命令</span>
</span><span class='line'>    <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">rcmd</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">redircmd</span><span class="o">*</span><span class="p">)</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//fprintf(stderr, &quot;redir not implemented\n&quot;);</span>
</span><span class='line'>        <span class="c1">// Your code here ...</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">rcmd</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">);</span>     <span class="c1">// 重定向命令已经默认的fd指向了0或1，所以这里是关闭stdin 或者 stdout</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">open</span><span class="p">(</span><span class="n">rcmd</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">,</span><span class="n">rcmd</span><span class="o">-&gt;</span><span class="n">mode</span><span class="p">,</span><span class="n">S_IRUSR</span><span class="o">|</span><span class="n">S_IWUSR</span><span class="o">|</span><span class="n">S_IRGRP</span><span class="o">|</span><span class="n">S_IROTH</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Cannot open file</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">runcmd</span><span class="p">(</span><span class="n">rcmd</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="sc">&#39;|&#39;</span><span class="o">:</span>                      <span class="c1">//  管道线命令</span>
</span><span class='line'>        <span class="n">pcmd</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">pipecmd</span><span class="o">*</span><span class="p">)</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// fprintf(stderr, &quot;pipe not implemented\n&quot;);</span>
</span><span class='line'>        <span class="c1">// Your code here ...</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">pipe</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Create pipe failes</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 子进程把pipe的right end 和 标准输出连起来</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">fork1</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">dup</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// 标准输出被赋予fd:p[1]</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>  <span class="c1">// 这样fd表里只剩下标准输入fd:0 和输出fd:p[1]</span>
</span><span class='line'>            <span class="n">runcmd</span><span class="p">(</span><span class="n">pcmd</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">fork1</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">dup</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// 标准输入被赋予fd:p[0]</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// 这样fd表里只剩下标准输入fd:fd[0] 和 输出fd:p[0]</span>
</span><span class='line'>            <span class="n">runcmd</span><span class="p">(</span><span class="n">pcmd</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">wait</span><span class="p">();</span> <span class="c1">// 父进程等待子进程结束。</span>
</span><span class='line'>        <span class="n">wait</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mit6.828 Chapter 0: Operating System Interfaces]]></title>
    <link href="http://sdytlm.github.io/blog/2015/01/17/os1/"/>
    <updated>2015-01-17T00:00:00-08:00</updated>
    <id>http://sdytlm.github.io/blog/2015/01/17/os1</id>
    <content type="html"><![CDATA[<p><strong>Process</strong>: include memory containing instructions, data and a stack. <strong>Instructions</strong> implement the program&rsquo;s computation. The <strong>data</strong> are the variables on which the computation acts. The <strong>stack</strong> organizes the program&rsquo;s procedure calls.</p>

<blockquote><p>Procedure calls： 也叫系统调用，用来给process调用kernel service. 当process调用系统调用时，硬件cpu会提高程序的privilege level然后执行内核中已经定义好的函数.</p></blockquote>

<!--more-->


<h3>Processes and Memory</h3>

<ul>
<li>xv6 进程包括<strong>user-space memory</strong>和<strong>per-process state</strong> private to the kernel.</li>
<li>当进程不工作时保存CPU Register，下次启动时再restore.</li>
<li><p>一个进程可以调用fork system call来生成一个新进程叫<strong>child process</strong>. 原来那个进程叫<strong>parent process</strong>.</p>

<blockquote><p>child process 有父进程的memory content.</p></blockquote></li>
<li><p>fork system call returns in both parent and child.</p></li>
</ul>


<blockquote><p>In the parent process, fork returns the child&rsquo;s pid. In the child, it returns 0.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent: child=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">wait</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child %d is done</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child: exiting</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">exit</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;fork error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">parent</span><span class="p">:</span> <span class="n">child</span><span class="o">=</span><span class="mi">1234</span>
</span><span class='line'>
</span><span class='line'><span class="nl">child</span><span class="p">:</span> <span class="n">exiting</span>
</span><span class='line'>
</span><span class='line'><span class="err">注：输出结果的顺序可能不同，取决于</span><span class="n">child</span> <span class="err">和</span> <span class="n">parent</span><span class="err">谁先执行</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：parent process 和 child process 执行在不同的内存和寄存器中，修改其中的一个变量不会影响到另一个进程的执行
* <strong>exec(filename, *argv)</strong> system call: 从file system 加载指定文件到进程的内存中. 在xv6中，文件格式为ELF. exec执行以后，不会反回原进程，而是继续从载入的文件开始执行.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;echo&quot;</span><span class="p">;</span> <span class="c1">// 会被忽略</span>
</span><span class='line'><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">exec</span><span class="p">(</span><span class="s">&quot;/bin/echo&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;exec error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>第一个变量argv[0]会被忽略，不起实际作用</p></blockquote>

<ul>
<li>Xv6 shell的执行流程:

<ol>
<li>shell 执行 <strong>getcmd</strong> 获得用户输入的命令</li>
<li>shell 执行 <strong>fork</strong> 创建一个shell 进程的copy,然后shell进入wait状态</li>
<li>shell 执行 <strong>runcmd</strong> 运行用户的命令</li>
<li>runcmd函数调用<strong>exec</strong> 系统调用加载适当的函数如：echo</li>
<li>在函数(echo) 的结束，有<strong>exit</strong>系统调用返回shell, shell从wait中退出</li>
</ol>
</li>
</ul>


<blockquote><p>xv86为用户分配内存空间: <strong>fork</strong>为子进程copy父进程的内存,<strong>exec</strong> 为可执行文件ELF开辟内存, 当用户需要额外内存时(malloc) 调用<strong>sbrk(n)</strong></p></blockquote>

<hr />

<h3>I/O and File Descriptors</h3>

<ul>
<li>File Descriptor: a small integer representing a kernel-managed object that a process may read from or write to.</li>
</ul>


<blockquote><p>xv6中，所有的object都有file descriptor</p></blockquote>

<ul>
<li>每一个进程都有private file descriptor table.</li>
<li><strong>read(fd,buf,n)</strong>系统调用: 读取fd中n个bytes到buf. 每个fd中都有一个<strong>offset</strong>，读取一次都会update offset，以便下次继续读取. 若没什么可读了，返回0，否则返回读取的字节数.</li>
<li><strong>write(fd,buf,n)</strong>系统调用： 向fd中写入buf里的n个bytes. 工作原理与read类似，也有<strong>offset</strong>
举例（Cat的实现):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(;;){</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">buf</span><span class="p">));</span>  <span class="c1">// 从标准输入读</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>                       <span class="c1">// 输入结束</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>                       <span class="c1">// error</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;read error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">!=</span> <span class="n">n</span><span class="p">){</span>      <span class="c1">// 向标准输出写</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;write error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>close 系统调用会释放一个file descriptor。 当有进程申请新的file descriptor时，<strong>数值最小的那个fd</strong>会被分配给新的object.</li>
<li><p>实现 I/O 重定向: 先用close释放一个file descriptor，然后重新open一个文件，这样新的文件就拥有了释放掉的fd(因为总是从最小的fd开始分配).</p>

<p>  举例（实现cat &lt; tinput.txt)：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;cat&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 确保是在子进程里</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>      <span class="c1">// 释放fd 0</span>
</span><span class='line'>    <span class="n">open</span><span class="p">(</span><span class="s">&quot;input.txt&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span> <span class="c1">// assign fd0 to input.txt</span>
</span><span class='line'>    <span class="n">exec</span><span class="p">(</span><span class="s">&quot;cat&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>           <span class="c1">// 执行cat命令</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code> &gt; Fork 拷贝父进程的file descriptor table 到子进程. exec在载入文件时依然会保留进程的file descriptor table.
</code></pre>

<ul>
<li>当父子进程同时操作一个fd时，fd中的offset是共享的.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;hello &quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">wait</span><span class="p">();</span>                  <span class="c1">// 确保先执行子进程再执行父进程</span>
</span><span class='line'>    <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>父进程写的word不会覆盖子进程写的hello. 因为offset是共享的.</p></blockquote>

<ul>
<li><strong>dup</strong>系统调用: 复制当前fd，返回一个新的fd指向同一个Object. dup出来的新fd共享之前fd的offset</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">dup</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>                <span class="c1">// 复制fd 1</span>
</span><span class='line'><span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;hello &quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>&gt; 在不创建子进程的情况下，通过dup实现共享offset。除此之外offset不能共享
</code></pre>

<hr />

<h3>Pipes</h3>

<p>实现一个简单的Pipe, wc 连接pipe的read end</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;wc&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">pipe</span><span class="p">(</span><span class="n">p</span><span class="p">);</span> <span class="c1">// 创建pipe，在p中记录read和write fd</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 子进程</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dup</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>    <span class="c1">// fd0 被赋给p[0]指向的object</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>  <span class="c1">// p[1]必须在wc之前被close, 否则read end就不会结束</span>
</span><span class='line'>    <span class="n">exec</span><span class="p">(</span><span class="s">&quot;/bin/wc&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span> <span class="c1">// execute wc on p[0]</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>         <span class="c1">// 父进程</span>
</span><span class='line'>    <span class="n">write</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;hello world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span> <span class="c1">// execute &quot;write hello world to p[1]&quot;</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>上面代码中, p[0]: read end, p[1]: write end . 子进程必须在wc之前关闭p[1], 否则wc时read end一直等待所有指向write end的fd关闭.</p></blockquote>

<ul>
<li>如果pipe的read end没有数据, 则read end 要么是等待数据,要么等待所有指向write end的fd都关闭. 若后一种情况发生时，读到的是0，表示读到文件的结束了.</li>
<li>如何实现<code>fork sh.c | wc -l</code>

<ul>
<li>child process creates a pipe to connect the left end of the pipe with the right end.</li>
<li>child process calls <strong>runcmd</strong> for the left end of the pipeline</li>
<li>child process calls <strong>runcmd</strong> for the right end of the pipe</li>
<li>waits for the left and the right ends to finish by calling <strong>wait</strong> twice</li>
</ul>
</li>
<li>pipe 和 temp file的不同之处:

<ul>
<li>pipe 可以自动清理</li>
<li>tmp file需要空间，pipe不需要空间，传递的是data stream</li>
<li>pipe 可以 synchronization,一个process可以block read等到另一个process写完pipe，再读取.</li>
</ul>
</li>
</ul>


<hr />

<h3>File System</h3>

<ul>
<li><strong>chdir</strong> 系统调用: 改变当前工作目录</li>
<li><strong>mkdir</strong> 系统调用: 创建一个新的目录, 用<strong>open</strong>系统调用可以创建新的文件</li>
<li><strong>mknod</strong> 系统调用: 创建新的设备文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// chdir</span>
</span><span class='line'><span class="n">chdir</span><span class="p">(</span><span class="s">&quot;/a&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">chdir</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">open</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 另一种实现方法</span>
</span><span class='line'><span class="n">open</span><span class="p">(</span><span class="s">&quot;/a/b/c&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// mkdir</span>
</span><span class='line'><span class="n">mkdir</span><span class="p">(</span><span class="s">&quot;/dir&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dir/file&quot;</span><span class="p">,</span> <span class="n">O_CREATE</span><span class="o">|</span><span class="n">O_WRONLY</span><span class="p">);</span> <span class="c1">// 创建文件</span>
</span><span class='line'><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// mknod</span>
</span><span class='line'><span class="n">mknod</span><span class="p">(</span><span class="s">&quot;/console&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 这两个数字分别是major and minor device number. 用来识别kernel deviced</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>fstat</strong> 系统调用: 可以读取一个fd指向的object的信息. fstat 读取的数据结构定义如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define T_DIR 1 </span><span class="c1">// Directory</span>
</span><span class='line'><span class="cp">#define T_FILE 2 </span><span class="c1">// File</span>
</span><span class='line'><span class="cp">#define T_DEV 3 </span><span class="c1">// Device</span>
</span><span class='line'><span class="k">struct</span> <span class="n">stat</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">type</span><span class="p">;</span> <span class="c1">// Type of file</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">dev</span><span class="p">;</span> <span class="c1">// File system’s disk device</span>
</span><span class='line'>    <span class="n">uint</span> <span class="n">ino</span><span class="p">;</span> <span class="c1">// Inode number, OS里用来识别真实文件的, 一个innode 可以被Link到多个名字去</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">nlink</span><span class="p">;</span> <span class="c1">// Number of links to file</span>
</span><span class='line'>    <span class="n">uint</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// Size of file in bytes</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>link</strong> 和 <strong>unlink</strong> 系统调用: 为已存在的文件创建一个“别名”，但是都指向相同的Innode.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">open</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="n">O_CREATE</span><span class="o">|</span><span class="n">O_WRONLY</span><span class="p">);</span>
</span><span class='line'><span class="n">link</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">unlink</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
