<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[卖萌的弱渣]]></title>
  <link href="http://sdytlm.github.io/atom.xml" rel="self"/>
  <link href="http://sdytlm.github.io/"/>
  <updated>2019-05-06T11:38:15+08:00</updated>
  <id>http://sdytlm.github.io/</id>
  <author>
    <name><![CDATA[Min Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Company List]]></title>
    <link href="http://sdytlm.github.io/blog/2019/05/06/company-list/"/>
    <updated>2019-05-06T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2019/05/06/company-list</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;公司清单&rdquo;
date: 2019-05-06
comments: true
categories: Investment</p>

<h2>tag: Investment</h2>

<p>=== 公司主营业务</p>

<p>主营业务是什么，最近几年的销量和收入增速</p>

<p>=== 行业分析</p>

<p>行业的产业链、产量、产能、竞争格局、供应和需求分析、行业发展阶段（不同行业分析的重点可能不同）。</p>

<p>比如行业的发展阶段若出于快速衰退和可以预见到被取代则pass，而行业停滞和缓慢衰退同时市场集中度不高的则也有投资价值（水泥行业）。</p>

<p>=== 业务是否存在</p>

<p>这一点可重要可不重要，因为很多企业尤其是to C的企业基本不会有这个问题，而在看一家to B的企业时则需要关注这个点（很多港股的化工企业就有这个问题）。</p>

<p>实地调研、竞争对手、供应商、消费者、上市年份（超过10年的基本不会有问题）、借壳上市（有问题的可能性更大）。</p>

<p>=== 财务数据是否真实</p>

<p>+有足够的货币资金，是否还有大量的短期和长期借款；</p>

<p>+商誉数额，形成的原因；</p>

<p>+经营性净现金流/归母净；</p>

<p>+毛利率、净利率异于同行的原因；</p>

<p>+存货、应收账款周转率是否异于行业；</p>

<p>+关联交易数额；</p>

<p>=== 财务表现（本身以及同行业比较）</p>

<p>ROE、ROIC、十年资本支出效率</p>

<p>=== 公司的核心竞争力（护城河）</p>

<p>需要与第5点一起看。</p>

<p>成本优势、品牌优势、技术优势、特许经营权</p>

<p>=== 股权结构</p>

<p>很多公司为什么不具有先发优势、不具有天生优势、所在的行业也不是一个好生意，但是依然可以超越同行，为投资者带来丰厚的回报，原因是管理效率高，而根本的原因是股权结构。比如海螺水泥、洋河股份，他们的管理层和员工持股激发了人的活力。</p>

<p>我认为股权结构从好到不好的顺序是混合所有制、国资绝对控股、民营绝对控股。</p>

<p>=== 利益相关者、企业文化、社会责任</p>

<p>看完基业长青这本书知道企业文化很重要，做正确的事，使企业更长久和健康的活下去，需要公司有正确的企业文化，但是这一点还是蛮难观察的，可能通过实地调研是更好的办法。</p>

<p>=== 未来业务发展</p>

<p>价格和量上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[会计报表]]></title>
    <link href="http://sdytlm.github.io/blog/2017/04/01/accountant/"/>
    <updated>2017-04-01T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2017/04/01/accountant</id>
    <content type="html"><![CDATA[<h3>资产负债表</h3>

<h3>利润表</h3>

<h3>现金流量表</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play KVMGT (GPU Virtualization)]]></title>
    <link href="http://sdytlm.github.io/blog/2016/11/16/virtualization-play-kvmgt/"/>
    <updated>2016-11-16T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/11/16/virtualization-play-kvmgt</id>
    <content type="html"><![CDATA[<h3>Host (Opensuse 14.2)</h3>

<ul>
<li>install libcheese</li>
</ul>


<p><code>sudo apt-get install libglew-dev libcheese7 libcheese-gtk23 libclutter-gst-2.0-0 libcogl15 libclutter-gtk-1.0-0 libclutter-1.0-0</code></p>

<ul>
<li>Download new host kernel</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/01org/igvtg-kernel kernel_src
</span><span class='line'>cd kernel_src
</span><span class='line'>git checkout 2016q2-4.3.0 (linux kernel 4.3)
</span><span class='line'>cp configure-file to ./.config
</span><span class='line'>make ; make modules ; make modules_install ; make install; 
</span></code></pre></td></tr></table></div></figure>


<h3>QEMU (2.3)</h3>

<p>In ./configure, Add <code>-lEGL</code> when vgt-egl-compositor is used.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/01org/igvtg-qemu qemu_src
</span><span class='line'>cd qemu_src
</span><span class='line'>git submodule update --init dtc
</span><span class='line'>git submodule update --init roms/seabios
</span><span class='line'>./configure --prefix=/usr \
</span><span class='line'>            --enable-kvm \
</span><span class='line'>            --enable-sdl \
</span><span class='line'>            --disable-werror \
</span><span class='line'>            --target-list=x86_64-softmmu
</span><span class='line'>make 
</span><span class='line'>cd roms/seabios
</span><span class='line'>LC_ALL=C make -j8
</span></code></pre></td></tr></table></div></figure>


<h3>Host Grub</h3>

<p>Add <code>intel_iommu=igfx_off i915.hvm_boot_foreground=1 loglvl=all guest_loglvl=all conring_size=4M noreboot</code> on linux option.</p>

<h3>Host Driver</h3>

<ul>
<li>Update all packages including x11-xorg</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://anongit.freedesktop.org/git/xorg/driver/xf86-video-intel
</span><span class='line'>cd xf86-video-intel
</span><span class='line'>git checkout 2.99.917
</span><span class='line'>./autogen.sh --prefix=/opt/hsw/usr
</span><span class='line'>make && make install
</span><span class='line'>cd /usr/lib64/xorg/modules/drivers/
</span><span class='line'>ln -sf /opt/hsw/usr/lib64/xorg/modules/drivers/intel_drv.so intel_drv.so
</span></code></pre></td></tr></table></div></figure>


<h3>Guest</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partition Equal Subset Sum]]></title>
    <link href="http://sdytlm.github.io/blog/2016/10/10/leetcode-partition-equal-subset-sum/"/>
    <updated>2016-10-10T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/10/10/leetcode-partition-equal-subset-sum</id>
    <content type="html"><![CDATA[<p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>

<h4>Note:</h4>

<p>Both the array size and each of the array element will not exceed 100.</p>

<h4>Example 1:</h4>

<p>Input: [1, 5, 11, 5]</p>

<p>Output: true</p>

<p>Explanation: The array can be partitioned as [1, 5, 5] and [11].</p>

<h4>Example 2:</h4>

<p>Input: [1, 2, 3, 5]</p>

<p>Output: false</p>

<p>Explanation: The array cannot be partitioned into equal sum subsets.</p>

<!--more-->


<h3>Solution</h3>

<ul>
<li>DFS + Hash_map(nums[i], appear nums)</li>
</ul>


<figure class='code'><figcaption><span> (Partition-Equal-Subset-Sum.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Partition-Equal-Subset-Sum.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canPartition</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hash_map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">nums</span><span class="o">){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">hash_map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">num</span><span class="o">))</span>
</span><span class='line'>                <span class="n">hash_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">hash_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">num</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">hash_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">num</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">sum</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span><span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">helper</span><span class="o">(</span><span class="n">hash_map</span><span class="o">,</span> <span class="n">sum</span><span class="o">/</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// dfs</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">helper</span><span class="o">(</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hash_map</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">hash_map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">target</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">hash_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">target</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">hash_map</span><span class="o">.</span><span class="na">keySet</span><span class="o">()){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="o">&amp;&amp;</span> <span class="n">hash_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">num</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>                <span class="n">hash_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">hash_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">num</span><span class="o">)-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">helper</span><span class="o">(</span><span class="n">hash_map</span><span class="o">,</span> <span class="n">target</span><span class="o">-</span><span class="n">num</span><span class="o">))</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="n">hash_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">hash_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">num</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combination Sum 4]]></title>
    <link href="http://sdytlm.github.io/blog/2016/10/10/combination-sum4/"/>
    <updated>2016-10-10T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/10/10/combination-sum4</id>
    <content type="html"><![CDATA[<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>

<h4>Example:</h4>

<p>nums = [1, 2, 3]
target = 4</p>

<p>The possible combination ways are:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(1, 1, 1, 1)
</span><span class='line'>(1, 1, 2)
</span><span class='line'>(1, 2, 1)
</span><span class='line'>(1, 3)
</span><span class='line'>(2, 1, 1)
</span><span class='line'>(2, 2)
</span><span class='line'>(3, 1)</span></code></pre></td></tr></table></div></figure>


<p>Note that different sequences are counted as different combinations.</p>

<p>Therefore the output is 7.</p>

<h4>Follow up:</h4>

<ul>
<li>What if negative numbers are allowed in the given array?</li>
<li><p>How does it change the problem?</p></li>
<li><p>What limitation we need to add to the question to allow negative numbers?</p></li>
</ul>


<!--more-->


<h3>Soltuion</h3>

<ul>
<li>DP</li>
</ul>


<figure class='code'><figcaption><span> (Combination-Sum4.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Combination-Sum4.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">combinationSum4</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">target</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">dp</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">){</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>
</span><span class='line'>                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">num</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">target</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queue Reconstruction by Height]]></title>
    <link href="http://sdytlm.github.io/blog/2016/10/05/leetcode-queue-reconstruction-by-height/"/>
    <updated>2016-10-05T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/10/05/leetcode-queue-reconstruction-by-height</id>
    <content type="html"><![CDATA[<p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.</p>

<h3>Note:</h3>

<p>The number of people is less than 1,100.</p>

<h3>Example:</h3>

<p>Input:</p>

<p>[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</p>

<p>Output:</p>

<p>[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</p>

<!--more-->


<h3>Solution</h3>

<figure class='code'><figcaption><span> (Queue-Reconstruction-by-Height.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Queue-Reconstruction-by-Height.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">reconstructQueue</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// override compare</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;(){</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">o1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">o2</span><span class="o">)</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">o1</span><span class="o">[</span><span class="mi">0</span><span class="o">]!=</span><span class="n">o2</span><span class="o">[</span><span class="mi">0</span><span class="o">]?</span> <span class="n">o2</span><span class="o">[</span><span class="mi">0</span><span class="o">]-</span><span class="n">o1</span><span class="o">[</span><span class="mi">0</span><span class="o">]:</span> <span class="n">o2</span><span class="o">[</span><span class="mi">1</span><span class="o">]-</span><span class="n">o1</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>            <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">cur:</span> <span class="n">people</span><span class="o">)</span>
</span><span class='line'>                <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cur</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">cur</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ret</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">people</span><span class="o">.</span><span class="na">length</span><span class="o">][]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest-Palindrome]]></title>
    <link href="http://sdytlm.github.io/blog/2016/10/05/leetcode-longest-palindrome/"/>
    <updated>2016-10-05T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/10/05/leetcode-longest-palindrome</id>
    <content type="html"><![CDATA[<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>

<p>This is case sensitive, for example &ldquo;Aa&rdquo; is not considered a palindrome here.</p>

<h3>Note:</h3>

<p>Assume the length of given string will not exceed 1,010.</p>

<h3>Example:</h3>

<p>Input:
&ldquo;abccccdd&rdquo;</p>

<p>Output:
7</p>

<p>Explanation:
One longest palindrome that can be built is &ldquo;dccaccd&rdquo;, whose length is 7.</p>

<!--more-->


<h3>Solution</h3>

<ul>
<li>Java</li>
</ul>


<figure class='code'><figcaption><span> (Longest-Palindrome.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Longest-Palindrome.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()==</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">hs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">hs</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))){</span>
</span><span class='line'>                <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>                <span class="n">hs</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">hs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(!</span><span class="n">hs</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">count</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wiggle Subsequence]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/10/leetcode-wiggle-subsequence/"/>
    <updated>2016-09-10T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/10/leetcode-wiggle-subsequence</id>
    <content type="html"><![CDATA[<p>A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.</p>

<p>For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</p>

<p>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p>

<h4>Examples:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input: [1,7,4,9,2,5]
</span><span class='line'>Output: 6
</span><span class='line'>The entire sequence is a wiggle sequence.
</span><span class='line'>
</span><span class='line'>Input: [1,17,5,10,13,15,10,5,16,8]
</span><span class='line'>Output: 7
</span><span class='line'>There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].
</span><span class='line'>
</span><span class='line'>Input: [1,2,3,4,5,6,7,8,9]
</span><span class='line'>Output: 2</span></code></pre></td></tr></table></div></figure>


<h4>Follow up:</h4>

<p>Can you do it in O(n) time?</p>

<!--more-->


<h3>Solution</h3>

<ul>
<li>构造法:</li>
<li>up: 结尾是wiggle up 的序列的长度</li>
<li>down: 结尾是wiggle down的序列的长度</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if nums[i]&gt;nums[i-1]; down[i] = up[i-1]+1
</span><span class='line'>if nums[i]&lt;nums[i-1]; up[i] = down[i-1]+1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (Wiggle-Subsequence.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Wiggle-Subsequence.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wiggleMaxLength</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type nums: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">up</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
</span><span class='line'>        <span class="n">down</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="c"># wiggle down, we need to find the length of last wiggle up</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="c"># wiggle up, we need to find the length of last wiggle down</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">up</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>                <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">down</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">up</span><span class="p">),</span><span class="nb">max</span><span class="p">(</span><span class="n">down</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UTF-8 Validation]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/10/leetcode-utf-8-validation/"/>
    <updated>2016-09-10T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/10/leetcode-utf-8-validation</id>
    <content type="html"><![CDATA[<p>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:</p>

<ol>
<li>For 1-byte character, the first bit is a 0, followed by its unicode code.</li>
<li>For n-bytes character, the first n-bits are all one&rsquo;s, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.</li>
</ol>


<p>This is how the UTF-8 encoding would work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   Char. number range  |        UTF-8 octet sequence
</span><span class='line'>      (hexadecimal)    |              (binary)
</span><span class='line'>   --------------------+---------------------------------------------
</span><span class='line'>   0000 0000-0000 007F | 0xxxxxxx
</span><span class='line'>   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
</span><span class='line'>   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
</span><span class='line'>   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></code></pre></td></tr></table></div></figure>


<p>Given an array of integers representing the data, return whether it is a valid utf-8 encoding.</p>

<h4>Note:</h4>

<p>The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.</p>

<h4>Example 1:</h4>

<p>data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.</p>

<p>Return true.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.</p>

<h5>Example 2:</h5>

<p>data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.</p>

<p>Return false.
The first 3 bits are all one&rsquo;s and the 4th bit is 0 means it is a 3-bytes character.</p>

<p>The next byte is a continuation byte which starts with 10 and that&rsquo;s correct.</p>

<p>But the second continuation byte does not start with 10, so it is invalid.</p>

<!--more-->


<h3>Solution</h3>

<figure class='code'><figcaption><span> (Utf-8-Validation.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Utf-8-Validation.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">validUtf8</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type data: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: bool</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">masks</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">]</span>
</span><span class='line'>        <span class="n">bits</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">masks</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">bits</span><span class="p">[</span><span class="n">x</span><span class="p">]:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span> <span class="o">!=</span> <span class="mh">0x80</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>            <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">x</span><span class="p">:]</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Substring With at Least K Repeating Characters]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/10/leetcode-longest-substring-with-at-least-k-repeating-characters/"/>
    <updated>2016-09-10T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/10/leetcode-longest-substring-with-at-least-k-repeating-characters</id>
    <content type="html"><![CDATA[<p>Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.</p>

<h4>Example 1:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input:
</span><span class='line'>s = "aaabb", k = 3
</span><span class='line'>
</span><span class='line'>Output:
</span><span class='line'>3
</span><span class='line'>
</span><span class='line'>The longest substring is "aaa", as 'a' is repeated 3 times.</span></code></pre></td></tr></table></div></figure>


<h3>Example 2:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input:
</span><span class='line'>s = "ababbc", k = 2
</span><span class='line'>
</span><span class='line'>Output:
</span><span class='line'>5
</span><span class='line'>
</span><span class='line'>The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>Solution</h3>

<ul>
<li>以出现次数不到k的字符做split. 递归调用，返回最大值</li>
</ul>


<figure class='code'><figcaption><span> (Longest-Substring-with-at-least-k-repeating-character.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Longest-Substring-with-at-least-k-repeating-character.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">longestSubstring</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type s: str</span>
</span><span class='line'><span class="sd">        :type k: int</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">set</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># x没有重复k次</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">longestSubstring</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>        <span class="c"># 所有s中字符都符合</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Absolute File Path]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/10/leetcode-longest-absolute-file-path/"/>
    <updated>2016-09-10T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/10/leetcode-longest-absolute-file-path</id>
    <content type="html"><![CDATA[<p>Suppose we abstract our file system by a string in the following manner:</p>

<p>The string &ldquo;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&rdquo; represents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dir
</span><span class='line'>    subdir1
</span><span class='line'>    subdir2
</span><span class='line'>        file.ext</span></code></pre></td></tr></table></div></figure>


<p>The directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.</p>

<p>The string &ldquo;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&rdquo; represents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dir
</span><span class='line'>    subdir1
</span><span class='line'>        file1.ext
</span><span class='line'>        subsubdir1
</span><span class='line'>    subdir2
</span><span class='line'>        subsubdir2
</span><span class='line'>            file2.ext</span></code></pre></td></tr></table></div></figure>


<p>The directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.</p>

<p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is &ldquo;dir/subdir2/subsubdir2/file2.ext&rdquo;, and its length is 32 (not including the double quotes).</p>

<p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.</p>

<h4>Note:</h4>

<ul>
<li>The name of a file contains at least a . and an extension.</li>
<li>The name of a directory or sub-directory will not contain a ..</li>
<li>Time complexity required: O(n) where n is the size of the input string.</li>
</ul>


<p>Notice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.</p>

<!--more-->


<h3>Solution</h3>

<ul>
<li>hash_map: &lt;层数，字符串长度></li>
</ul>


<figure class='code'><figcaption><span> (Longest-Absolute-File-Path.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Longest-Absolute-File-Path.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">lengthLongestPath</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">input</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type input: str</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">hash_map</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span> <span class="c"># &lt;目录深度， 当前字符串长度&gt;</span>
</span><span class='line'>        <span class="n">maxlen</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># splitlines以&#39;\n&#39;划分</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">input</span><span class="o">.</span><span class="n">splitlines</span><span class="p">():</span>
</span><span class='line'>            <span class="c"># 有几个\t 就是第几层目录</span>
</span><span class='line'>            <span class="n">depth</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">name</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">lstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># 找到文件</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;.&#39;</span> <span class="ow">in</span> <span class="n">name</span><span class="p">:</span>
</span><span class='line'>                <span class="n">maxlen</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">maxlen</span><span class="p">,</span> <span class="n">hash_map</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># &quot;1&quot;: &quot;/&quot;</span>
</span><span class='line'>                <span class="n">hash_map</span><span class="p">[</span><span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">hash_map</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">maxlen</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Twitter]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/10/leetcode-design-twitter/"/>
    <updated>2016-09-10T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/10/leetcode-design-twitter</id>
    <content type="html"><![CDATA[<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user&rsquo;s news feed. Your design should support the following methods:</p>

<ul>
<li>postTweet(userId, tweetId): Compose a new tweet.</li>
<li>getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user&rsquo;s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</li>
<li>follow(followerId, followeeId): Follower follows a followee.</li>
<li>unfollow(followerId, followeeId): Follower unfollows a followee.</li>
</ul>


<!--more-->


<h3>Solution</h3>

<p><a href="https://discuss.leetcode.com/topic/47838/python-solution/2">python 实现</a></p>

<figure class='code'><figcaption><span> (Design-Twitter.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Design-Twitter.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Twitter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Initialize your data structure here.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">step</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="c">#tweets: &lt;userID, tweets in dequeue&gt;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">tweets</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># followees: &lt;userID, user&#39;s followers in set&gt;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">followees</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">postTweet</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">userId</span><span class="p">,</span> <span class="n">tweetId</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Compose a new tweet.</span>
</span><span class='line'><span class="sd">        :type userId: int</span>
</span><span class='line'><span class="sd">        :type tweetId: int</span>
</span><span class='line'><span class="sd">        :rtype: void</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">tweets</span><span class="p">[</span><span class="n">userId</span><span class="p">]</span><span class="o">.</span><span class="n">appendleft</span><span class="p">((</span><span class="nb">next</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">timer</span><span class="p">),</span><span class="n">tweetId</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getNewsFeed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">userId</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Retrieve the 10 most recent tweet ids in the user&#39;s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</span>
</span><span class='line'><span class="sd">        :type userId: int</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">RelatedTweets</span> <span class="o">=</span> <span class="n">heapq</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tweets</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">followees</span><span class="p">[</span><span class="n">userId</span><span class="p">]</span> <span class="o">|</span> <span class="p">{</span><span class="n">userId</span><span class="p">}))</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">t</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">RelatedTweets</span><span class="p">,</span> <span class="mi">10</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">follow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">followerId</span><span class="p">,</span> <span class="n">followeeId</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Follower follows a followee. If the operation is invalid, it should be a no-op.</span>
</span><span class='line'><span class="sd">        :type followerId: int</span>
</span><span class='line'><span class="sd">        :type followeeId: int</span>
</span><span class='line'><span class="sd">        :rtype: void</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">followees</span><span class="p">[</span><span class="n">followerId</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">followeeId</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">unfollow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">followerId</span><span class="p">,</span> <span class="n">followeeId</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Follower unfollows a followee. If the operation is invalid, it should be a no-op.</span>
</span><span class='line'><span class="sd">        :type followerId: int</span>
</span><span class='line'><span class="sd">        :type followeeId: int</span>
</span><span class='line'><span class="sd">        :rtype: void</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">followees</span><span class="p">[</span><span class="n">followerId</span><span class="p">]</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="n">followeeId</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Your Twitter object will be instantiated and called as such:</span>
</span><span class='line'><span class="c"># obj = Twitter()</span>
</span><span class='line'><span class="c"># obj.postTweet(userId,tweetId)</span>
</span><span class='line'><span class="c"># param_2 = obj.getNewsFeed(userId)</span>
</span><span class='line'><span class="c"># obj.follow(followerId,followeeId)</span>
</span><span class='line'><span class="c"># obj.unfollow(followerId,followeeId)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lexicographical Numbers]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/09/leetcode-lexicographical-numbers/"/>
    <updated>2016-09-09T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/09/leetcode-lexicographical-numbers</id>
    <content type="html"><![CDATA[<p>Given an integer n, return 1 - n in lexicographical order.</p>

<p>For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].</p>

<p>Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.</p>

<!--more-->


<h3>Solution</h3>

<p>递归的思路如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def solve(m):
</span><span class='line'>    result.append(m)
</span><span class='line'>    if m * 10 &lt;= n: solve(m * 10)
</span><span class='line'>    if m &lt; n and m % 10 &lt; 9: solve(m + 1)</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Lexicographical-Numbers.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Lexicographical-Numbers.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">lexicalOrder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type n: int</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
</span><span class='line'>            <span class="n">top</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">top</span><span class="p">)</span>
</span><span class='line'>            <span class="c">#各位数字小于9</span>
</span><span class='line'>            <span class="c"># 一定要先插个位数字小于９的，再插top*10</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">top</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">top</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">top</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">top</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">top</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Palindromic Substring]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/08/leetcode-longest-palindromic-substring/"/>
    <updated>2016-09-08T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/08/leetcode-longest-palindromic-substring</id>
    <content type="html"><![CDATA[<p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>

<!--more-->


<h3>Solution</h3>

<h4>DP</h4>

<p><a href="http://articles.leetcode.com/longest-palindromic-substring-part-i/">讲解</a></p>

<figure class='code'><figcaption><span> (Longest-Palindromic-Substring.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Longest-Palindromic-Substring.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">longestPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type s: str</span>
</span><span class='line'><span class="sd">        :rtype: str</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="nb">bool</span> <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="mi">1000</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">maxStart</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># dp[i][i] = True</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># dp[i][i+1] = True if s[i] == s[i+1]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>                <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>                <span class="n">maxStart</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># dp[i][j] = True if s[i]==s[j] and dp[i+1][j-1] == True</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">length</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">length</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>                    <span class="n">maxLen</span> <span class="o">=</span> <span class="n">length</span>
</span><span class='line'>                    <span class="n">maxStart</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">maxStart</span><span class="p">,</span><span class="n">maxStart</span><span class="o">+</span><span class="n">maxLen</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Recursive</h4>

<figure class='code'><figcaption><span> (Longest-Palindromic-Substring.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Longest-Palindromic-Substring.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">lo</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxLen</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="c1">// 奇数长度</span>
</span><span class='line'>            <span class="n">extentPalindrome</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 偶数长度</span>
</span><span class='line'>            <span class="n">extentPalindrome</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">lo</span><span class="o">,</span> <span class="n">lo</span><span class="o">+</span><span class="n">maxLen</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">extentPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// start, end　之间一定维持着palindrome</span>
</span><span class='line'>        <span class="k">while</span><span class="o">(</span><span class="n">start</span> <span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">end</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">start</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">end</span><span class="o">)){</span>
</span><span class='line'>            <span class="c1">// 持续向两面扩张</span>
</span><span class='line'>            <span class="n">start</span><span class="o">--;</span>
</span><span class='line'>            <span class="n">end</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 注意: 此时end,start已经过了</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">maxLen</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span>
</span><span class='line'>            <span class="n">maxLen</span> <span class="o">=</span> <span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="n">lo</span> <span class="o">=</span> <span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Largest Divisible Subsets]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/08/leetcode-largest-divisible-subsets/"/>
    <updated>2016-09-08T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/08/leetcode-largest-divisible-subsets</id>
    <content type="html"><![CDATA[<p>Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.</p>

<p>If there are multiple solutions, return any subset is fine.</p>

<h4>Example 1:</h4>

<p>nums: [1,2,3]</p>

<p>Result: [1,2] (of course, [1,3] will also be ok)</p>

<h4>Example 2:</h4>

<p>nums: [1,2,4,8]</p>

<p>Result: [1,2,4,8]</p>

<!--more-->


<h3>Solution</h3>

<p><code>dp[x] = max(dp[x], dp[y] + 1)  其中： 0 &lt;= y &lt; x 且 nums[x] % nums[y] == 0</code></p>

<figure class='code'><figcaption><span> (Largest-Divisible-Subset.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Largest-Divisible-Subset.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">largestDivisibleSubset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type nums: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># s[d] = set() # 最大数为ｄ的子集</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="nb">set</span><span class="p">()}</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
</span><span class='line'>            <span class="n">s</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">((</span><span class="n">s</span><span class="p">[</span><span class="n">d</span><span class="p">]</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">S</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span> <span class="o">|</span> <span class="p">{</span><span class="n">x</span><span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">values</span><span class="p">(),</span><span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># DP</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">largestDivisibleSubset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type nums: List[int]</span>
</span><span class='line'><span class="sd">        :rtype: List[int]</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">nums</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># 最大值为nums[i]且满足条件的set，能有多少数dp[i]</span>
</span><span class='line'>        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
</span><span class='line'>        <span class="c"># 在一个解中，数x之前的数为prev[x]</span>
</span><span class='line'>        <span class="n">prev</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">%</span> <span class="n">nums</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">dp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">x</span><span class="p">]:</span>
</span><span class='line'>                    <span class="n">dp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>                    <span class="n">prev</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># nums[idx]有最大subset</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="n">dp</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">idx</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
</span><span class='line'>            <span class="n">idx</span> <span class="o">=</span> <span class="n">prev</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decode String]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/08/leetcode-decode-string/"/>
    <updated>2016-09-08T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/08/leetcode-decode-string</id>
    <content type="html"><![CDATA[<p>Given an encoded string, return it&rsquo;s decoded string.</p>

<p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>

<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>

<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won&rsquo;t be input like 3a or 2[4].</p>

<h4>Examples:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s = "3[a]2[bc]", return "aaabcbc".
</span><span class='line'>s = "3[a2[c]]", return "accaccacc".
</span><span class='line'>s = "2[abc]3[cd]ef", return "abcabccdcdcdef".</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>Solution</h3>

<ul>
<li>Java</li>
</ul>


<figure class='code'><figcaption><span> (Decode-String.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Decode-String.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">decodeString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intStack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="c1">// current string</span>
</span><span class='line'>        <span class="n">StringBuilder</span> <span class="n">cur</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">StringBuilder</span><span class="o">&gt;</span> <span class="n">strStack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">StringBuilder</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="c1">// current number</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()){</span>
</span><span class='line'>            <span class="c1">// 持续统计num</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">ch</span><span class="o">)){</span>
</span><span class='line'>                <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">ch</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">&#39;[&#39;</span><span class="o">){</span>
</span><span class='line'>                <span class="n">intStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>                <span class="n">strStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">cur</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// new cur and k</span>
</span><span class='line'>                <span class="n">cur</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>                <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="o">){</span>
</span><span class='line'>                <span class="n">StringBuilder</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>                <span class="n">cur</span> <span class="o">=</span> <span class="n">strStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span><span class='line'>                <span class="c1">// generate num*string</span>
</span><span class='line'>                <span class="k">for</span><span class="o">(</span><span class="n">k</span><span class="o">=</span><span class="n">intStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span><span class="n">k</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">;</span><span class="n">k</span><span class="o">--)</span> <span class="n">cur</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">tmp</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// characters</span>
</span><span class='line'>            <span class="k">else</span> <span class="n">cur</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cur</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python</li>
<li><code>stack&lt;string,num&gt;</code> 辅助</li>
</ul>


<figure class='code'><figcaption><span> (Decode-String.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Decode-String.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decodeString</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type s: str</span>
</span><span class='line'><span class="sd">        :rtype: str</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>            <span class="c">#123456789</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">ch</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">+=</span> <span class="n">ch</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">ch</span> <span class="o">==</span> <span class="s">&#39;[&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># 插入当前的num</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="p">)])</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">ch</span> <span class="o">==</span> <span class="s">&#39;]&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">sub</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>                <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">sub</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># characters</span>
</span><span class='line'>                <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="n">ch</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stack</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[K Smallest Element in a Sorted Matrix]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/07/leetcode-k-smallest-element-in-a-sorted-matrix/"/>
    <updated>2016-09-07T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/07/leetcode-k-smallest-element-in-a-sorted-matrix</id>
    <content type="html"><![CDATA[<p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>

<p>Note that it is the kth smallest element in the sorted order, not the kth distinct element.</p>

<h4>Example:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>matrix = [
</span><span class='line'>   [ 1,  5,  9],
</span><span class='line'>   [10, 11, 13],
</span><span class='line'>   [12, 13, 15]
</span><span class='line'>],
</span><span class='line'>k = 8,
</span><span class='line'>
</span><span class='line'>return 13.</span></code></pre></td></tr></table></div></figure>


<h4>Note:</h4>

<p>You may assume k is always valid, 1 ≤ k ≤ n2.</p>

<!--more-->


<h3>Solution</h3>

<ul>
<li>二分查找，start = matrix[0][0], end = matrix[-1][-1]</li>
<li>mid = (start+end)/2，统计小于等于mid的个数（统计时，以左下角为起点)</li>
</ul>


<figure class='code'><figcaption><span> (Kth-Smallest-Element-in-A-Sorted-Matrix.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Kth-Smallest-Element-in-A-Sorted-Matrix.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">kthSmallest</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type matrix: List[List[int]]</span>
</span><span class='line'><span class="sd">        :type k: int</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</span><span class='line'>        <span class="n">l</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">:</span>
</span><span class='line'>            <span class="n">mid_val</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>            <span class="n">cnt</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">countLowerNumbers</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">mid_val</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>
</span><span class='line'>                <span class="n">l</span> <span class="o">=</span> <span class="n">mid_val</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">r</span> <span class="o">=</span> <span class="n">mid_val</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">countLowerNumbers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">matrix</span><span class="p">,</span><span class="n">mid_val</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># 从左下角开始统计相等或者小于mid_val的数量</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mid_val</span> <span class="o">&gt;=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="c"># 整个一列都是小于mid_val</span>
</span><span class='line'>                <span class="n">cnt</span> <span class="o">+=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cnt</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Subsequence]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/07/leetcode-is-subsequence/"/>
    <updated>2016-09-07T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/07/leetcode-is-subsequence</id>
    <content type="html"><![CDATA[<p>Given a string s and a string t, check if s is subsequence of t.</p>

<p>You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (&lt;=100).</p>

<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, &ldquo;ace&rdquo; is a subsequence of &ldquo;abcde&rdquo; while &ldquo;aec&rdquo; is not).</p>

<h4>Example 1:</h4>

<p>s = &ldquo;abc&rdquo;, t = &ldquo;ahbgdc&rdquo;</p>

<p>Return true.</p>

<h4>Example 2:</h4>

<p>s = &ldquo;axc&rdquo;, t = &ldquo;ahbgdc&rdquo;</p>

<p>Return false.</p>

<h4>Follow up:</h4>

<p>If there are lots of incoming S, say S1, S2, &hellip; , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p>

<!--more-->


<h3>Solution</h3>

<ul>
<li>同时便利s和t,只要有s[i]==t[j]，i+=1. 否则只增加j</li>
<li><p>若i 最终和s长度相同，则true</p></li>
<li><p>Java</p></li>
</ul>


<figure class='code'><figcaption><span> (Is-Subsequence.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Is-Subsequence.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSubsequence</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="n">t</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)){</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">++;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">j</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python</li>
</ul>


<figure class='code'><figcaption><span> (is-Subsequence.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/is-Subsequence.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">isSubsequence</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type s: str</span>
</span><span class='line'><span class="sd">        :type t: str</span>
</span><span class='line'><span class="sd">        :rtype: bool</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Count Primes]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/07/leetcode-count-primes/"/>
    <updated>2016-09-07T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/07/leetcode-count-primes</id>
    <content type="html"><![CDATA[<p>Count the number of prime numbers less than a non-negative number, n.</p>

<!--more-->


<h3>Solution</h3>

<ul>
<li>打表求素数</li>
<li>Java</li>
</ul>


<figure class='code'><figcaption><span> (Count-Primes.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Count-Primes.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">countPrimes</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kt">boolean</span><span class="o">[]</span> <span class="n">isprimes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>       <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">isprimes</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="kc">false</span><span class="o">){</span>
</span><span class='line'>                <span class="n">count</span> <span class="o">++;</span>
</span><span class='line'>                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span>
</span><span class='line'>                    <span class="n">isprimes</span><span class="o">[</span><span class="n">i</span><span class="o">*</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python</li>
</ul>


<figure class='code'><figcaption><span> (Count-Primes.py)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Python/Count-Primes.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">countPrimes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :type n: int</span>
</span><span class='line'><span class="sd">        :rtype: int</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">isPrimes</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">]</span><span class="o">*</span><span class="nb">max</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">isPrimes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">isPrimes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">isPrimes</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class='line'>                <span class="c"># 把isPrimes[i的倍数]设置成false</span>
</span><span class='line'>                <span class="c"># 从i*i开始</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span>
</span><span class='line'>                <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">isPrimes</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>                    <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># 统计所有True的数量</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">isPrimes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Linked List]]></title>
    <link href="http://sdytlm.github.io/blog/2016/09/06/leetcode-reverse-linked-list/"/>
    <updated>2016-09-06T00:00:00+08:00</updated>
    <id>http://sdytlm.github.io/blog/2016/09/06/leetcode-reverse-linked-list</id>
    <content type="html"><![CDATA[<p>Reverse a singly linked list.</p>

<h4>Hint:</h4>

<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>

<!--more-->


<h3>Solution</h3>

<p>*　Java</p>

<figure class='code'><figcaption><span> (Reverse-Linked-List.java)</span> <a href='http://sdytlm.github.io/downloads/code/LeetCode/Java/Reverse-Linked-List.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Definition for singly-linked list.</span>
</span><span class='line'><span class="cm"> * public class ListNode {</span>
</span><span class='line'><span class="cm"> *      int val;</span>
</span><span class='line'><span class="cm"> *      ListNode next;</span>
</span><span class='line'><span class="cm"> *      ListNode(int x) { val = x; }</span>
</span><span class='line'><span class="cm"> * }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">reverseList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">head</span><span class="o">,</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">newhead</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">head</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">newhead</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ListNode</span> <span class="n">nextNode</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newhead</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">nextNode</span><span class="o">,</span><span class="n">head</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Python
File /Users/minli/Desktop/Personal/sdytlm.github.io/source/downloads/code/LeetCode/Python/Reverse-Linked-List.py could not be found</li>
</ul>

]]></content>
  </entry>
  
</feed>
