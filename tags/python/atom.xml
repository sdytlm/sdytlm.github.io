<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: python | 卖萌的弱渣]]></title>
  <link href="http://sdytlm.github.io/tags/python/atom.xml" rel="self"/>
  <link href="http://sdytlm.github.io/"/>
  <updated>2015-04-09T10:07:29-07:00</updated>
  <id>http://sdytlm.github.io/</id>
  <author>
    <name><![CDATA[Min Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python: Introduction]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/06/python1/"/>
    <updated>2015-04-06T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/06/python1</id>
    <content type="html"><![CDATA[<h3>Study Resource</h3>

<ul>
<li>Python Official Document: <a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf">http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf</a></li>
<li>Python Standard Library: <a href="https://docs.python.org/2/library/index.html#library-index">https://docs.python.org/2/library/index.html#library-index</a></li>
<li>Python Official Tutorial: <a href="https://docs.python.org/2/tutorial/index.html">https://docs.python.org/2/tutorial/index.html</a></li>
</ul>


<h3>Features</h3>

<ul>
<li>Advancced Data Structure</li>
<li>Rely on <code>indentation</code>  (- -!)</li>
<li>No declaration for parameters</li>
</ul>


<!--more-->


<h3>Interpreter</h3>

<ul>
<li><p>Boot with a script
<code>python
python test.py
</code></p></li>
<li><p>Boot with command
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="n">command</span> <span class="p">[</span><span class="n">arg</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">*</span> <span class="n">Boot</span> <span class="k">with</span> <span class="n">module</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">module</span> <span class="p">[</span><span class="n">arg</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Module</span> <span class="n">name</span> <span class="ow">and</span> <span class="n">command</span> <span class="n">parameters</span> <span class="n">are</span> <span class="n">stored</span> <span class="ow">in</span> <span class="sb">`sys.argv[]`</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span> <span class="n">Make</span> <span class="n">your</span> <span class="n">python</span> <span class="n">script</span> <span class="n">executable</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">*</span> <span class="n">Add</span> <span class="n">the</span> <span class="n">following</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">first</span> <span class="n">line</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python3</span><span class="o">.</span><span class="mi">4</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">*</span> <span class="n">Give</span> <span class="n">your</span> <span class="nb">file</span> <span class="n">execution</span> <span class="n">permission</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="n">yourpython</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Use special character encoding
Add the following in the first or second line for Windows 1252
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;-&lt;</span><span class="n">em</span><span class="o">&gt;-</span> <span class="n">coding</span><span class="p">:</span> <span class="n">cp</span><span class="o">-</span><span class="mi">1252</span> <span class="o">-&lt;/</span><span class="n">em</span><span class="o">&gt;-&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="sb">``</span><span class="err">`</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Basic</span> <span class="n">Introduction</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="n">Number</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Division</span> <span class="n">will</span> <span class="ow">not</span> <span class="n">dismiss</span> <span class="n">fractional</span> <span class="n">part</span>
</span></code></pre></td></tr></table></div></figure> python</p>

<blockquote><blockquote><blockquote><p>8/5
1.6
&#8220;`</p></blockquote></blockquote></blockquote></li>
<li><p>If you do not like fractional part, use <code>//</code>.</p></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 7//3
2
&gt;&gt; 7//-3
-3
</code></pre>

<ul>
<li>Python will transfer int to float if your expression has both of them.</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 3 * 3.75 / 1.5
7.5
&gt;&gt;&gt; 7.0/2
3.5
</code></pre>

<hr />

<h4>Assignment</h4>

<pre><code class="python">&gt;&gt;&gt; width = 20
&gt;&gt;&gt; x = y = z = 10          # Assign multiple var with same value
&gt;&gt;&gt; x
10
&gt;&gt;&gt; y
10
</code></pre>

<ul>
<li>The last printed expression is assigned to the variable <code>_</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; tax = 12.5 / 100
&gt;&gt;&gt; price = 100.50
&gt;&gt;&gt; price * tax
12.5625
&gt;&gt;&gt; price + _
113.0625
&gt;&gt;&gt; round(_, 2)
113.06

&gt; `_` variable is read-only by the user.
</code></pre>

<ul>
<li>You can also do the multiple assignment</li>
</ul>


<pre><code class="python">a,b = 0,1   # a=0, b=1
</code></pre>

<hr />

<h4>Parameter</h4>

<blockquote><p>Must define the parameter before you access it</p></blockquote>

<p>For example:</p>

<pre><code class="python">&gt;&gt;&gt; n
NameError: xxxxxxxxx
</code></pre>

<h4>String</h4>

<p>String can be expressed in &lsquo; &rsquo; or &ldquo; &rdquo;</p>

<ul>
<li>If you use &ldquo; &lsquo; &rdquo; or &rsquo; &ldquo; &lsquo;, the inside quote will be considered quote. Otherwise, you need use <code>\</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 'eggs'
'spam eggs'
&gt;&gt;&gt; 'doesn\'t'     # use \' to represent single quote because this is ' ' '
"doesn't:
&gt;&gt;&gt; '"Yes," he said.'  # you don't need \" because it's ' " '
'"Yes," he said.'
&gt;&gt;&gt; "\"Yes,\" he said."  # you have to use \" for ", because this is " " "
'"Yes," he said.'
&gt;&gt;&gt; '"Isn\'t," she said,'
'"Isn\'t," she said.'
</code></pre>

<ul>
<li>print() will handle &lsquo;\&rsquo; as special character</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; '"Isn\'t," she said.'
'"Isn\'t," she said.'
&gt;&gt;&gt; print('"Isn'\t,"she said.')
"Isn't," she said.         # \ will not be displayed
&gt;&gt;&gt; s = 'First line, \nSecond line.'
'First line, \nSecond line.'
&gt;&gt;&gt; print(s)
First line,
Second line.
</code></pre>

<blockquote><p>If you want python accpet \, you need to add <code>r</code> before the first quote</p></blockquote>

<pre><code>&gt;&gt; print('C:\some\name')
C:\some
ame
&gt;&gt;&gt; print(r'C:\some\name')
C:\some\name
</code></pre>

<ul>
<li>print() can display multiple line by using &ldquo; &rdquo; &#8221;</li>
</ul>


<pre><code class="python">print("""\
Usage: thingy
       -h
      -H
""")
</code></pre>

<p>Output is the same format as this input</p>

<ul>
<li>String can be concatenated with <code>+</code> and repeated with <code>*</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 3 * 'un' + 'iun'
'unununiun'
</code></pre>

<ul>
<li>String literals next to each other are automatically concatenated</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 'Py' 'thon'
'Python'
</code></pre>

<blockquote><p>This automatical concatenation Cannot concatenate a variable and a string</p></blockquote>

<pre><code class="python">&gt;&gt;&gt; prefix = 'Py'
&gt;&gt;&gt; prefix 'thon'
SyntaxError: invalid syntax
</code></pre>

<p>But <code>+</code> still works</p>

<pre><code class="python">&gt;&gt;&gt; prefix ='Py'
&gt;&gt;&gt; prefix + 'thon'
'Python'
</code></pre>

<ul>
<li>String can be indexed starting from 0. string[0] is also string type</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word = "Python"
&gt;&gt;&gt; word[0]
'P'
&gt;&gt;&gt; word[5]
'n'
</code></pre>

<ul>
<li>Indices may also be negative numbers which start counting from the <code>right</code>, negative indices starts from <code>-1</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word[-1]
'n'
&gt;&gt;&gt; word[-2]
'o'
&gt;&gt;&gt; word[-6]
'P'
</code></pre>

<ul>
<li>Slicing is supported in string. We can get substring by slicing</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word='Python'
&gt;&gt;&gt; word[0:2]    # get characters [0,2)
'Py'
&gt;&gt;&gt; word[:2]
'Py'
&gt;&gt;&gt; word[4:]    # get characters [4,length]
'on'
&gt;&gt;&gt; word[-2:]
'on'
&gt;&gt;&gt; word[:2] + word[2:]
'Python'
</code></pre>

<ul>
<li>Attempting to use a index that is too large will result in error</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word='Python'
&gt;&gt;&gt; word[42]
IndexError: string index out of range
</code></pre>

<p>But slice index is ok for this</p>

<pre><code class="python">&gt;&gt;&gt; word='Python'
&gt;&gt;&gt; word[4:42]
'on'
&gt;&gt;&gt; word[42:]
' '
</code></pre>

<ul>
<li>Python strings cannot be changed</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word[0] = 'J'
TypeError: 'str' does not support item assign
</code></pre>

<blockquote><p>If you need a different string, you have to create a new one</p></blockquote>

<ul>
<li>Function <code>len()</code> returns the length of a string</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; s = 'abcdefg'
&gt;&gt;&gt; len(s)
7
</code></pre>

<h4>Lists</h4>

<ul>
<li>Lists can contain items of different types, but usually the items have the same type</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; squares = [1,4,9,16,25]
&gt;&gt;&gt; squares
[1,4,9,16,25]
</code></pre>

<ul>
<li>Lists can also be indexed and sliced:</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; squares = [1,4,9,16,25]
&gt;&gt;&gt; squares[0]
1
&gt;&gt;&gt; square[-1]
25
&gt;&gt;&gt; squares[-3:]            // slice will return a new list
[9,16,25]
</code></pre>

<ul>
<li>List can also be concatenated</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; squares = [1,4,9,16,25]
&gt;&gt;&gt; squares + [36,49,64,81,100]
[1,4,9,16,25,36,49,64,81,100]
</code></pre>

<ul>
<li>Strings cannot be changed, but list can be changed</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; cubes = [1,8,27,65,125]
&gt;&gt;&gt; cubes[3] = 64
&gt;&gt;&gt; cubes
[1,8,27,64,125]
</code></pre>

<ul>
<li>You can add new items at the ned of list by append()</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; cubes = [1,8,27,64,125]
&gt;&gt;&gt; cubes.append(216)
&gt;&gt;&gt; cubes.append(7**3)
&gt;&gt;&gt; cubes
[1,8,27,64,125,216,343]
</code></pre>

<ul>
<li>You can even change the size of list or clear it by assignment to slices</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; letters = ['a','b','c','d','e','f','g']
&gt;&gt;&gt; letters[2:5] = ['C','D','E']
&gt;&gt;&gt; letters
['a','b','C','D','E','f','g']
# remove them
&gt;&gt;&gt; letters[2:5] = []
&gt;&gt;&gt; letters
['a','b','f','g']
&gt;&gt;&gt; letters[:] = []
&gt;&gt;&gt; letters
[]
</code></pre>

<ul>
<li><code>len()</code> can applies to lists</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; letters = ['a','b','c','d']
&gt;&gt;&gt; len(letters)
4
</code></pre>

<ul>
<li>A lists can contain other lists</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; a = ['a','b','c']
&gt;&gt;&gt; n = [1,2,3,]
&gt;&gt;&gt; x= [a,n]
&gt;&gt;&gt; x
[['a','b','c'],[1,2,3]]
&gt;&gt;&gt; x[0]
['a','b','c']
&gt;&gt;&gt; x[0][1]                 # like two dimention array
'b'
</code></pre>
]]></content>
  </entry>
  
</feed>
