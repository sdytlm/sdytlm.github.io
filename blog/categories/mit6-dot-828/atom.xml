<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mit6.828 | My Octopress Blog]]></title>
  <link href="http://sdytlm.github.io/blog/categories/mit6-dot-828/atom.xml" rel="self"/>
  <link href="http://sdytlm.github.io/"/>
  <updated>2015-01-17T13:44:19-05:00</updated>
  <id>http://sdytlm.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mit6.828 Homework: Shell]]></title>
    <link href="http://sdytlm.github.io/blog/2015/01/17/shell/"/>
    <updated>2015-01-17T00:00:00-05:00</updated>
    <id>http://sdytlm.github.io/blog/2015/01/17/shell</id>
    <content type="html"><![CDATA[<h2>常用Shell 命令</h2>

<ol>
<li><code>ls &gt; y</code>
 把ls结果输出到文件y中</li>
<li><code>cat</code>
 cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用

<ul>
<li>一次显示整个文件:<code>cat filename</code></li>
<li>从键盘创建一个文件:<code>cat &gt; filename</code> 只能创建新文件,不能编辑已有文件</li>
<li>将几个文件合并为一个文件:<code>cat file1 file2 &gt; file</code></li>
</ul>
</li>
<li><code>uniq</code>
 uniq命令常用语报告或者消除文件中的重复内容，一般与sort命令结合使用</li>
<li><code>wc</code>
 wc命令的功能为统计指定文件中的字节数、字数、行数, 并将统计结果显示输出
<code>
ls &gt; y
cat &lt; y | sort | uniq | wc &gt; y1
</code>

<blockquote><p>功能：把当前目录ls的结果存到y中,然后读取y的内容，然后将y的内容排序，去掉重复，然后统计字数，行数.并把结果保存到y1</p></blockquote></li>
</ol>


<hr />

<h2>什么是Unix Pipeline</h2>

<p>举个例子：
<code>ls -1 | grep p | more</code>
只列出来还有字母p的当前目录下的文件</p>

<p>Pipeline 使用&#8221;|&ldquo;来区分多个命令，从左到右，前一个命令的结果是后一个命令的输入</p>

<hr />

<h2>sh.c 数据结构</h2>

<pre><code class="c">struct cmd{...}
struct execcmd{...}  // 普通指令
struct redicmd{...}  // 有重定向的指令
struct pipecmd{...}  // pipe指令
</code></pre>

<hr />

<h2>sh.c 函数</h2>

<pre><code class="c">void runcmd(struct cmd *cmd)
int getcmd(char* buffer, int nbuf) // 检测输入是否是标准输入流stdin，然后把用户输入存到buffer里
struct cmd* execcmd() // 为一个cmd数据结构分配内存
struct cmd* redircmd(struct cmd *subcmd, char *file, int type)
struct cmd* pipecmd(struct cmd *left, struct cmd *right)
int gettoken(chasr **ps, char *es, char **q, char **eq) // 把地址ps到es的字符串中的变量找到，并存到q到eq的地址去
int peek(char **ps, char *es, char *toks) //判断从地址ps到es的字符串是否含有toks里面的字符
char *mkcopy(char *s, char *es) // s指向需要拷贝的字符串头，es指向需要拷贝的字符串结尾. 这个函数拷贝从s到es的字符串，然后返回拷贝的地址。
struct cmd* parsecmd(char *s) // 解析命令把buffer里的命令包装成可执行的数据结构struct cmd
struct cmd* parseline(char **ps, char *es) 
struct cmd* parsepipe(char **ps, char *es)
struct cmd* parsedirs(struct cmd *cmd, char **ps, char *es)
struct cmd* parseexec(char **ps, char *es)
</code></pre>

<h2>用到的C和操作系统函数</h2>

<ul>
<li><p>函数原型：extern char <code>*strchr(char *str,char character)</code>
参数说明：str为一个字符串的指针，character为一个待查找字符。
所在库名：#include <code>&lt;string.h&gt;</code>
函数功能：从字符串str中寻找字符character第一次出现的位置。</p></li>
<li><p>execv
函数原型：execv(char<em> cmd, char </em>argv[]);
函数说明：execv 本质上是执行命令 cmd, *argv[] 是包括argv[0]的参数
举例：
  <code>c
  execv(argv[0], argv);
 </code></p></li>
<li>open
 函数原型：int open(const char *pathname, int flags, mode_t mode);
 函数说明：

<ul>
<li>creates a new open file description, an entry in the system-wide  table of       open files. The new open file description is initially not shared with any       other process, but  sharing  may  arise  via <strong>fork</strong></li>
<li>parameter <strong>flags</strong> must include one of the following access modes:              O_RDONLY, O_WRONLY, or O_RDWR.</li>
<li><strong>mode</strong>: 创建文件时设定的其他用户权限: S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
举例说明：</li>
<li>打开一个新文件用来写入</li>
</ul>


<pre><code class="`` c">  #include &lt;fcntl.h&gt;
     ...
     int fd;
     mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
     char *filename = "/tmp/file";
     ...
     fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, mode);
     ...
</code></pre>

<blockquote><p>当打开的文件不存在时 <strong>flag</strong> 必须有O_CREATE, 打开已存在文件则不需要.</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
</feed>
