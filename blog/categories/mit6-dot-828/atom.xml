<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mit6.828 | 卖萌的弱渣]]></title>
  <link href="http://sdytlm.github.io/blog/categories/mit6-dot-828/atom.xml" rel="self"/>
  <link href="http://sdytlm.github.io/"/>
  <updated>2015-04-06T11:45:03-07:00</updated>
  <id>http://sdytlm.github.io/</id>
  <author>
    <name><![CDATA[Min Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Operating System III: X86 and PC Architecture]]></title>
    <link href="http://sdytlm.github.io/blog/2015/02/01/os3/"/>
    <updated>2015-02-01T00:00:00-08:00</updated>
    <id>http://sdytlm.github.io/blog/2015/02/01/os3</id>
    <content type="html"><![CDATA[<h3>Registers</h3>

<table>
<thead>
<tr>
<th><strong>Name</strong>  </th>
<th>     </th>
<th> <strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CS   </td>
<td>   </td>
<td> code segment, for fetches via <strong>IP</strong></td>
</tr>
<tr>
<td>SS   </td>
<td>   </td>
<td> stack segment, for load/store via <strong>SP</strong> and <strong>BP</strong></td>
</tr>
<tr>
<td>DS   </td>
<td>   </td>
<td> data segment, for load/store via other registers</td>
</tr>
<tr>
<td>ES   </td>
<td>   </td>
<td> another data segment, <strong>destination for string operationgs</strong></td>
</tr>
<tr>
<td>SP   </td>
<td>   </td>
<td> stack pointer</td>
</tr>
<tr>
<td>BP   </td>
<td>   </td>
<td> frame base pointer</td>
</tr>
<tr>
<td>SI   </td>
<td>   </td>
<td> source index</td>
</tr>
<tr>
<td>DI   </td>
<td>   </td>
<td> destination index</td>
</tr>
<tr>
<td>IP   </td>
<td>   </td>
<td> instruction pointer</td>
</tr>
</tbody>
</table>


<!--more-->


<blockquote><p>IP increment after running each instruction. CALL REt, JMP can modify it.</p></blockquote>

<hr />

<h3>I/O</h3>

<ul>
<li>Only 1024 I/O addresses</li>
<li>Accessed with special instruction (<strong>IN, OUT</strong>)</li>
<li>Example: write a byte to line printer;</li>
</ul>


<pre><code class="c">#define DATA_PORT    0x378
#define STATUS_PORT  0x379
#define   BUSY 0x80
#define CONTROL_PORT 0x37A
#define   STROBE 0x01
void lpt_putc(int c)
{
  /* wait for printer to consume previous byte */
  while((inb(STATUS_PORT) &amp; BUSY) == 0)
    ;

  /* put the byte on the parallel lines */
  outb(DATA_PORT, c);

  /* tell the printer to look at the data */
  outb(CONTROL_PORT, STROBE);
  outb(CONTROL_PORT, 0);
}
</code></pre>

<hr />

<h3>MMIO</h3>

<ul>
<li>Use normal physical memory address

<ul>
<li>Limited size of I/O address space</li>
<li>No need instructions</li>
<li>System controller routes to appropriate device</li>
</ul>
</li>
<li>Work like &ldquo;magic&rdquo; memory

<ul>
<li><strong>Addressed</strong> and <strong>accessed</strong> like memory, but does not behave like memory</li>
<li>Reads and writes can have &ldquo;side effects&rdquo;</li>
<li>Read results can change due to external events</li>
</ul>
</li>
</ul>


<blockquote><p>side effect 是指：访问I/O寄存器时，不仅仅会像访问普通内存一样影响存储单元的值，更重要的是它可能改变CPU的I/O端口电平、输出时序或CPU对I/O端口电平的反应等等，从而实现CPU的控制功能。CPU在电路中的意义就是实现其side effect 。举个例子，有些设备的中断状态寄存器只要一读取，便自动清零。</p></blockquote>

<hr />

<h3>Translate virtual address to physical address</h3>

<ul>
<li><strong>pa = va + seg*16</strong>. e.g. set CS = 4096 to execute starting at 65536</li>
<li>Can&rsquo;t use the 16-bit address of a <strong>stack variable</strong> as a pointer</li>
<li><strong>0x66/0x67</strong> can switch between 16-bit and 32bit
For example:</li>
</ul>


<blockquote><p>in 32-bit mode, MOVW is expressed as 0x66 MOVW</p></blockquote>

<hr />

<h3>Instruction encoding</h3>

<pre><code class="c">b8 cd ab        16-bit CPU,  AX &lt;- 0xabcd
b8 34 12 cd ab      32-bit CPU, EAX &lt;- 0xabcd1234
66 b8 cd ab     32-bit CPU,  AX &lt;- 0xabcd
</code></pre>

<hr />

<h3>x86 Physical Memory</h3>

<ul>
<li>Reset or power-on jumps to ROM at <strong>0xfffffff0</strong> (so must be ROM at top&hellip;)</li>
<li>Write to VGA memory appear on the screen</li>
</ul>


<p><img src="https://copy.com/ydV77i6vO20CO3Ks" alt="image" /></p>

<hr />

<h3>ATT Syntax</h3>

<blockquote><p><strong>Operation  stc, dest</strong></p></blockquote>

<p>For example</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>ATT syntax</strong> </th>
<th style="text-align:left;"> <strong>Introduction</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> movl %eax, %edx </td>
<td style="text-align:left;">  edx = eax </td>
</tr>
<tr>
<td style="text-align:left;"> movl $0x123, %edx </td>
<td style="text-align:left;"> edx = 0x123 </td>
</tr>
<tr>
<td style="text-align:left;"> movl 0x123, %edx </td>
<td style="text-align:left;"> edx = * (int32_t)0x123 </td>
</tr>
<tr>
<td style="text-align:left;"> movl (%ebx), %edx </td>
<td style="text-align:left;"> edx = * (int32_t)ebx </td>
</tr>
<tr>
<td style="text-align:left;"> movl 4(%ebx), %edx </td>
<td style="text-align:left;"> edx = * (int32_t)(ebx+4) </td>
</tr>
</tbody>
</table>


<h3>Gcc x86 Calling Conventions</h3>

<ul>
<li>X86 stack <strong>grows down</strong>
Examples:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pushl</span> <span class="o">%</span><span class="n">eax</span>      <span class="c1">// subl $4, %esp</span>
</span><span class='line'>              <span class="c1">// movl %eax, (%esp)&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">popl</span> <span class="o">%</span><span class="n">eax</span>       <span class="c1">// movl (%esp), %eax</span>
</span><span class='line'>                <span class="c1">// addl $4, %esp</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code class="c">call 0x12345    // pushl %eip
                // movl $0x12345, %eip
</code></pre>

<pre><code class="c">ret             // popl %eip
</code></pre>

<hr />

<h3>How the stack is used between caller and callee</h3>

<ul>
<li>Just after call</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Register or address in stack</strong> </th>
<th style="text-align:left;"> <strong>What is stored</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> %eip </td>
<td style="text-align:left;"> The first instruction of callee </td>
</tr>
<tr>
<td style="text-align:left;"> %esp + 4 </td>
<td style="text-align:left;"> First argument </td>
</tr>
<tr>
<td style="text-align:left;"> %esp </td>
<td style="text-align:left;"> Return address </td>
</tr>
</tbody>
</table>


<ul>
<li>After ret instruction</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Register or address in the stack</strong> </th>
<th style="text-align:left;"> <strong>What is stored</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> %eip </td>
<td style="text-align:left;"> Contains the return address </td>
</tr>
<tr>
<td style="text-align:left;"> %esp </td>
<td style="text-align:left;"> Points at arguments pushed by caller </td>
</tr>
<tr>
<td style="text-align:left;"> %eax (and %edx if 64-bit) </td>
<td style="text-align:left;"> Return value </td>
</tr>
<tr>
<td style="text-align:left;"> %ebp, %ebx, %esi, %edi </td>
<td style="text-align:left;"> contain contents from the time of call </td>
</tr>
</tbody>
</table>


<ul>
<li><p>Terminology:</p>

<ul>
<li>%eax, %ecx, %edx: caller save register, that is caller should save them before call</li>
<li>%ebp, %ebx, %esi: callee save register</li>
</ul>
</li>
<li><p>Each function has a stack frame marked by <strong>%ebp, %esp</strong></p></li>
</ul>


<p><img src="https://copy.com/CfzaIS1btfMdlBui" alt="image" /></p>

<p>To keep this contract, we need to prologue and epilogue</p>

<p><strong>Prologue</strong></p>

<pre><code>pushl %ebp        // push current ebp
movl %esp, %ebp   // ebp = esp, ebp point to the next address of saved %ebp
</code></pre>

<blockquote><p>%esp: Always point to the bottom of stack
  %ebp: Point to the stack bottom of caller function. ebp is used before <strong>ret</strong></p></blockquote>

<p><strong>Epiloge</strong></p>

<pre><code>movl %ebp, %esp     // esp = ebp, then after that esp point to the bottom of caller's stack
pop %ebp
</code></pre>

<hr />

<h3>C -> Assembly</h3>

<p><strong>C code:</strong>
<code>c
int main(void) { return f(8)+1; }
int f(int x) { return g(x); }
int g(int x) { return x+3; }
</code></p>

<p>Assembly code:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">_main</span><span class="p">:</span>
</span><span class='line'>            <span class="c1">// prologue</span>
</span><span class='line'>            <span class="n">pushl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>            <span class="n">movl</span> <span class="o">%</span><span class="n">esp</span><span class="p">,</span> <span class="o">%</span><span class="n">ebp</span>     <span class="c1">// esp: always the bottom of stack, ebp: 用来保存上个func的esp, 已被返回时使用&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="c1">// body</span>
</span><span class='line'>        <span class="n">pushl</span> <span class="err">$</span><span class="mi">8</span>            <span class="c1">// parameter</span>
</span><span class='line'>        <span class="n">call</span> <span class="n">_f</span>
</span><span class='line'>        <span class="n">addl</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//epilogue</span>
</span><span class='line'>        <span class="n">movl</span> <span class="o">%</span><span class="n">ebp</span><span class="p">,</span> <span class="o">%</span><span class="n">esp</span>
</span><span class='line'>        <span class="n">popl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>        <span class="n">ret</span>
</span><span class='line'>    <span class="nl">_f</span><span class="p">:</span>
</span><span class='line'>        <span class="c1">// prologue</span>
</span><span class='line'>        <span class="n">pushl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>        <span class="n">movl</span> <span class="o">%</span><span class="n">esp</span><span class="p">,</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// body</span>
</span><span class='line'>        <span class="n">pushl</span> <span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">esp</span><span class="p">)</span>
</span><span class='line'>        <span class="n">call</span> <span class="n">_g</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// epilogue</span>
</span><span class='line'>        <span class="n">movl</span> <span class="o">%</span><span class="n">ebp</span><span class="p">,</span> <span class="o">%</span><span class="n">esp</span>
</span><span class='line'>        <span class="n">popl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>        <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">_g</span><span class="p">:</span>
</span><span class='line'>        <span class="c1">// prologue</span>
</span><span class='line'>        <span class="n">pushl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>        <span class="n">movl</span> <span class="o">%</span><span class="n">esp</span><span class="p">,</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// save %ebx</span>
</span><span class='line'>        <span class="n">pushl</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// body</span>
</span><span class='line'>        <span class="n">movl</span> <span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">ebp</span><span class="p">),</span> <span class="o">%</span><span class="n">ebx</span> <span class="c1">// why %ebp not %esp, because you push %ebx, then %esp will be added 4</span>
</span><span class='line'>        <span class="n">addl</span> <span class="err">$</span><span class="mi">3</span><span class="p">,</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>        <span class="n">movl</span> <span class="o">%</span><span class="n">ebx</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// restore %ebx</span>
</span><span class='line'>        <span class="n">popl</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//epilogue</span>
</span><span class='line'>        <span class="n">movl</span> <span class="o">%</span><span class="n">ebp</span><span class="p">,</span> <span class="o">%</span><span class="n">esp</span>
</span><span class='line'>        <span class="n">popl</span> <span class="o">%</span><span class="n">ebp</span>
</span><span class='line'>        <span class="n">ret</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Mit6</span><span class="mf">.828</span> <span class="nl">Homework</span><span class="p">:</span> <span class="n">Shell</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://sdytlm.github.io/blog/2015/01/17/shell/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2015</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">17</span><span class="nl">T00</span><span class="p">:</span><span class="mo">00</span><span class="o">:</span><span class="mo">00</span><span class="o">-</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//sdytlm.github.io/blog/2015/01/17/shell&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">常用</span><span class="n">Shell</span> <span class="err">命令</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ls</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'> <span class="err">把</span><span class="n">ls</span><span class="err">结果输出到文件</span><span class="n">y</span><span class="err">中</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cat</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">cat</span><span class="err">命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">一次显示整个文件</span><span class="o">:&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cat</span> <span class="n">filename</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">从键盘创建一个文件</span><span class="o">:&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cat</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">filename</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">只能创建新文件</span><span class="p">,</span><span class="err">不能编辑已有文件</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">将几个文件合并为一个文件</span><span class="o">:&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cat</span> <span class="n">file1</span> <span class="n">file2</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">file</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uniq</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">uniq</span><span class="err">命令常用语报告或者消除文件中的重复内容，一般与</span><span class="n">sort</span><span class="err">命令结合使用</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">wc</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'> <span class="n">wc</span><span class="err">命令的功能为统计指定文件中的字节数、字数、行数</span><span class="p">,</span> <span class="err">并将统计结果显示输出</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">ls</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">y</span>
</span><span class='line'><span class="n">cat</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">y</span> <span class="o">|</span> <span class="n">sort</span> <span class="o">|</span> <span class="n">uniq</span> <span class="o">|</span> <span class="n">wc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">y1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">功能：把当前目录</span><span class="n">ls</span><span class="err">的结果存到</span><span class="n">y</span><span class="err">中</span><span class="p">,</span><span class="err">然后读取</span><span class="n">y</span><span class="err">的内容，然后将</span><span class="n">y</span><span class="err">的内容排序，去掉重复，然后统计字数，行数</span><span class="p">.</span><span class="err">并把结果保存到</span><span class="n">y1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">什么是</span><span class="n">Unix</span> <span class="n">Pipeline</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">举个例子：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ls</span> <span class="o">-</span><span class="mi">1</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">p</span> <span class="o">|</span> <span class="n">more</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">只列出来还有字母</span><span class="n">p</span><span class="err">的当前目录下的文件</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Pipeline</span> <span class="err">使用</span><span class="s">&quot;|&amp;ldquo;来区分多个命令，从左到右，前一个命令的结果是后一个命令的输入&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">sh</span><span class="p">.</span><span class="n">c</span> <span class="err">数据结构</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">cmd</span><span class="p">{...}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">execcmd</span><span class="p">{...}</span>  <span class="c1">// 普通指令</span>
</span><span class='line'><span class="k">struct</span> <span class="n">redicmd</span><span class="p">{...}</span>  <span class="c1">// 有重定向的指令</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pipecmd</span><span class="p">{...}</span>  <span class="c1">// pipe指令</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">sh</span><span class="p">.</span><span class="n">c</span> <span class="err">函数</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">runcmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getcmd</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nbuf</span><span class="p">)</span> <span class="c1">// 检测输入是否是标准输入流stdin，然后把用户输入存到buffer里</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">execcmd</span><span class="p">()</span> <span class="c1">// 为一个cmd数据结构分配内存</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">redircmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">subcmd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">pipecmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">left</span><span class="p">,</span> <span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">gettoken</span><span class="p">(</span><span class="n">chasr</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">q</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">eq</span><span class="p">)</span> <span class="c1">// 把地址ps到es的字符串中的变量找到，并存到q到eq的地址去</span>
</span><span class='line'><span class="kt">int</span> <span class="n">peek</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">toks</span><span class="p">)</span> <span class="c1">//判断从地址ps到es的字符串是否含有toks里面的字符</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">mkcopy</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span> <span class="c1">// s指向需要拷贝的字符串头，es指向需要拷贝的字符串结尾. 这个函数拷贝从s到es的字符串，然后返回拷贝的地址。</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parsecmd</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="c1">// 解析命令把buffer里的命令包装成可执行的数据结构struct cmd</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parseline</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parsepipe</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parsedirs</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">cmd</span><span class="o">*</span> <span class="n">parseexec</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">ps</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">es</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">用到的</span><span class="n">C</span><span class="err">和操作系统函数</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">strchr</span>
</span><span class='line'><span class="err">函数原型：</span><span class="k">extern</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">strchr</span><span class="p">(</span><span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">str</span><span class="p">,</span><span class="kt">char</span> <span class="n">character</span><span class="p">)</span>
</span><span class='line'><span class="err">参数说明：</span><span class="n">str</span><span class="err">为一个字符串的指针，</span><span class="n">character</span><span class="err">为一个待查找字符。</span>
</span><span class='line'><span class="err">所在库名：#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">函数功能：从字符串</span><span class="n">str</span><span class="err">中寻找字符</span><span class="n">character</span><span class="err">第一次出现的位置。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">execv</span>
</span><span class='line'><span class="err">函数原型：</span><span class="n">execv</span><span class="p">(</span><span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">cmd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">[]);</span>
</span><span class='line'><span class="err">函数说明：</span><span class="n">execv</span> <span class="err">本质上是执行命令</span> <span class="n">cmd</span><span class="p">,</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="err">是包括</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">的参数</span>
</span><span class='line'><span class="err">举例：</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">c</span>
</span><span class='line'>  <span class="n">execv</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">open</span>
</span><span class='line'> <span class="err">函数原型：</span><span class="kt">int</span> <span class="n">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">mode_t</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'> <span class="err">函数说明：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">creates</span> <span class="n">a</span> <span class="n">new</span> <span class="n">open</span> <span class="n">file</span> <span class="n">description</span><span class="p">,</span> <span class="n">an</span> <span class="n">entry</span> <span class="n">in</span> <span class="n">the</span> <span class="n">system</span><span class="o">-</span><span class="n">wide</span>  <span class="n">table</span> <span class="n">of</span>       <span class="n">open</span> <span class="n">files</span><span class="p">.</span> <span class="n">The</span> <span class="n">new</span> <span class="n">open</span> <span class="n">file</span> <span class="n">description</span> <span class="n">is</span> <span class="n">initially</span> <span class="n">not</span> <span class="n">shared</span> <span class="n">with</span> <span class="n">any</span>       <span class="n">other</span> <span class="n">process</span><span class="p">,</span> <span class="n">but</span>  <span class="n">sharing</span>  <span class="n">may</span>  <span class="n">arise</span>  <span class="n">via</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">fork</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">parameter</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">flags</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">must</span> <span class="n">include</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="n">access</span> <span class="nl">modes</span><span class="p">:</span>              <span class="n">O_RDONLY</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="p">,</span> <span class="n">or</span> <span class="n">O_RDWR</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">mode</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;:</span> <span class="err">创建文件时设定的其他用户权限</span><span class="o">:</span> <span class="n">S_IRUSR</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IRGRP</span> <span class="o">|</span> <span class="n">S_IROTH</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">举例说明</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">打开一个新文件用来写入</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;`` c&quot;</span><span class="o">&gt;</span>  <span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fcntl</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">mode_t</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">S_IRUSR</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IRGRP</span> <span class="o">|</span> <span class="n">S_IROTH</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;/tmp/file&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">O_WRONLY</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_TRUNC</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当打开的文件不存在时</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">flag</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="err">必须有</span><span class="n">O_CREATE</span><span class="p">,</span> <span class="err">打开已存在文件则不需要</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dup</span>
</span><span class='line'>  <span class="err">函数原型</span><span class="o">:</span> <span class="kt">int</span> <span class="n">dup</span><span class="p">(</span><span class="kt">int</span> <span class="n">oldfd</span><span class="p">);</span>
</span><span class='line'>  <span class="err">函数说明</span><span class="o">:</span> <span class="n">create</span> <span class="n">a</span> <span class="n">copy</span> <span class="n">of</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="n">oldfd</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dup</span> <span class="n">uses</span> <span class="n">the</span> <span class="n">lowest</span><span class="o">-</span><span class="n">numbered</span> <span class="n">unused</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="n">the</span> <span class="n">new</span> <span class="n">descriptor</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">关键部分代码</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">runcmd</span><span class="p">(</span><span class="k">struct</span> <span class="n">cmd</span> <span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">execcmd</span> <span class="o">*</span><span class="n">ecmd</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">pipecmd</span> <span class="o">*</span><span class="n">pcmd</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">redircmd</span> <span class="o">*</span><span class="n">rcmd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">cmdPath</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;/bin/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">cmd</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span><span class="p">){</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;unknown runcmd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="sc">&#39; &#39;</span><span class="o">:</span>                       <span class="c1">// 普通命令</span>
</span><span class='line'>      <span class="n">ecmd</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">execcmd</span><span class="o">*</span><span class="p">)</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Your code here ...</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">execv</span><span class="p">(</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// 到/bin目录中找命令</span>
</span><span class='line'>          <span class="kt">char</span> <span class="n">cmdPath</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;/bin/&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">strcat</span><span class="p">(</span><span class="n">cmdPath</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">execv</span><span class="p">(</span><span class="n">cmdPath</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>    <span class="c1">// test /bin/cmd</span>
</span><span class='line'>              <span class="kt">char</span> <span class="n">cmdPath2</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;/usr/bin/&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="n">strcat</span><span class="p">(</span><span class="n">cmdPath2</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>   <span class="c1">// test /usr/bin/cmd (e.g.sort)</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">execv</span><span class="p">(</span><span class="n">cmdPath2</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Command %s not found</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ecmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>              <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="err">&#39;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&#39;</span><span class="o">:</span>                       <span class="c1">// 重定向命令</span>
</span><span class='line'>    <span class="k">case</span> <span class="err">&#39;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">rcmd</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">redircmd</span><span class="o">*</span><span class="p">)</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//fprintf(stderr, &quot;redir not implemented\n&quot;);</span>
</span><span class='line'>        <span class="c1">// Your code here ...</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">rcmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fd</span><span class="p">);</span>        <span class="c1">// 重定向命令已经默认的fd指向了0或1，所以这里是关闭stdin 或者 stdout</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">open</span><span class="p">(</span><span class="n">rcmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">file</span><span class="p">,</span><span class="n">rcmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mode</span><span class="p">,</span><span class="n">S_IRUSR</span><span class="o">|</span><span class="n">S_IWUSR</span><span class="o">|</span><span class="n">S_IRGRP</span><span class="o">|</span><span class="n">S_IROTH</span><span class="p">)</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Cannot open file</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">runcmd</span><span class="p">(</span><span class="n">rcmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="sc">&#39;|&#39;</span><span class="o">:</span>                      <span class="c1">//  管道线命令</span>
</span><span class='line'>        <span class="n">pcmd</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">pipecmd</span><span class="o">*</span><span class="p">)</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// fprintf(stderr, &quot;pipe not implemented\n&quot;);</span>
</span><span class='line'>        <span class="c1">// Your code here ...</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">pipe</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Create pipe failes</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 子进程把pipe的right end 和 标准输出连起来</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">fork1</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">dup</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// 标准输出被赋予fd:p[1]</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>  <span class="c1">// 这样fd表里只剩下标准输入fd:0 和输出fd:p[1]</span>
</span><span class='line'>            <span class="n">runcmd</span><span class="p">(</span><span class="n">pcmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">fork1</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">dup</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// 标准输入被赋予fd:p[0]</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// 这样fd表里只剩下标准输入fd:fd[0] 和 输出fd:p[0]</span>
</span><span class='line'>            <span class="n">runcmd</span><span class="p">(</span><span class="n">pcmd</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">wait</span><span class="p">();</span> <span class="c1">// 父进程等待子进程结束。</span>
</span><span class='line'>        <span class="n">wait</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Mit6</span><span class="mf">.828</span> <span class="n">Chapter</span> <span class="mi">0</span><span class="o">:</span> <span class="n">Operating</span> <span class="n">System</span> <span class="n">Interfaces</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://sdytlm.github.io/blog/2015/01/17/os1/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2015</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">17</span><span class="nl">T00</span><span class="p">:</span><span class="mo">00</span><span class="o">:</span><span class="mo">00</span><span class="o">-</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//sdytlm.github.io/blog/2015/01/17/os1&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">Process</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;:</span> <span class="n">include</span> <span class="n">memory</span> <span class="n">containing</span> <span class="n">instructions</span><span class="p">,</span> <span class="n">data</span> <span class="n">and</span> <span class="n">a</span> <span class="n">stack</span><span class="p">.</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">Instructions</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">implement</span> <span class="n">the</span> <span class="n">program</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">computation</span><span class="p">.</span> <span class="n">The</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">data</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">are</span> <span class="n">the</span> <span class="n">variables</span> <span class="n">on</span> <span class="n">which</span> <span class="n">the</span> <span class="n">computation</span> <span class="n">acts</span><span class="p">.</span> <span class="n">The</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">stack</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">organizes</span> <span class="n">the</span> <span class="n">program</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">procedure</span> <span class="n">calls</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Procedure</span> <span class="n">calls</span><span class="err">：</span> <span class="err">也叫系统调用，用来给</span><span class="n">process</span><span class="err">调用</span><span class="n">kernel</span> <span class="n">service</span><span class="p">.</span> <span class="err">当</span><span class="n">process</span><span class="err">调用系统调用时，硬件</span><span class="n">cpu</span><span class="err">会提高程序的</span><span class="n">privilege</span> <span class="n">level</span><span class="err">然后执行内核中已经定义好的函数</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Processes</span> <span class="n">and</span> <span class="n">Memory</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">xv6</span> <span class="err">进程包括</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">user</span><span class="o">-</span><span class="n">space</span> <span class="n">memory</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">per</span><span class="o">-</span><span class="n">process</span> <span class="n">state</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">private</span> <span class="n">to</span> <span class="n">the</span> <span class="n">kernel</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">当进程不工作时保存</span><span class="n">CPU</span> <span class="n">Register</span><span class="err">，下次启动时再</span><span class="n">restore</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">一个进程可以调用</span><span class="n">fork</span> <span class="n">system</span> <span class="n">call</span><span class="err">来生成一个新进程叫</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">child</span> <span class="n">process</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">.</span> <span class="err">原来那个进程叫</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">parent</span> <span class="n">process</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">child</span> <span class="n">process</span> <span class="err">有父进程的</span><span class="n">memory</span> <span class="n">content</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fork</span> <span class="n">system</span> <span class="n">call</span> <span class="n">returns</span> <span class="n">in</span> <span class="n">both</span> <span class="n">parent</span> <span class="n">and</span> <span class="n">child</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="n">the</span> <span class="n">parent</span> <span class="n">process</span><span class="p">,</span> <span class="n">fork</span> <span class="n">returns</span> <span class="n">the</span> <span class="n">child</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">pid</span><span class="p">.</span> <span class="n">In</span> <span class="n">the</span> <span class="n">child</span><span class="p">,</span> <span class="n">it</span> <span class="n">returns</span> <span class="mf">0.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;parent: child=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">wait</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child %d is done</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child: exiting</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">exit</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;fork error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">输出结果是</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nl">parent</span><span class="p">:</span> <span class="n">child</span><span class="o">=</span><span class="mi">1234</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">child</span><span class="p">:</span> <span class="n">exiting</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">注：输出结果的顺序可能不同，取决于</span><span class="n">child</span> <span class="err">和</span> <span class="n">parent</span><span class="err">谁先执行</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">注意：</span><span class="n">parent</span> <span class="n">process</span> <span class="err">和</span> <span class="n">child</span> <span class="n">process</span> <span class="err">执行在不同的内存和寄存器中，修改其中的一个变量不会影响到另一个进程的执行</span>
</span><span class='line'><span class="o">*</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">exec</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="o">*</span><span class="n">argv</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">system</span> <span class="nl">call</span><span class="p">:</span> <span class="err">从</span><span class="n">file</span> <span class="n">system</span> <span class="err">加载指定文件到进程的内存中</span><span class="p">.</span> <span class="err">在</span><span class="n">xv6</span><span class="err">中，文件格式为</span><span class="n">ELF</span><span class="p">.</span> <span class="n">exec</span><span class="err">执行以后，不会反回原进程，而是继续从载入的文件开始执行</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span>    <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;echo&quot;</span><span class="p">;</span> <span class="c1">// 会被忽略</span>
</span><span class='line'>    <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">exec</span><span class="p">(</span><span class="s">&quot;/bin/echo&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;exec error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">第一个变量</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">会被忽略，不起实际作用</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Xv6</span> <span class="n">shell</span><span class="err">的执行流程</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">shell</span> <span class="err">执行</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">getcmd</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="err">获得用户输入的命令</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">shell</span> <span class="err">执行</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">fork</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="err">创建一个</span><span class="n">shell</span> <span class="err">进程的</span><span class="n">copy</span><span class="p">,</span><span class="err">然后</span><span class="n">shell</span><span class="err">进入</span><span class="n">wait</span><span class="err">状态</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">shell</span> <span class="err">执行</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">runcmd</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="err">运行用户的命令</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">runcmd</span><span class="err">函数调用</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">exec</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="err">系统调用加载适当的函数如：</span><span class="n">echo</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">在函数</span><span class="p">(</span><span class="n">echo</span><span class="p">)</span> <span class="err">的结束，有</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">exit</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">系统调用返回</span><span class="n">shell</span><span class="p">,</span> <span class="n">shell</span><span class="err">从</span><span class="n">wait</span><span class="err">中退出</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xv86</span><span class="err">为用户分配内存空间</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">fork</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">为子进程</span><span class="n">copy</span><span class="err">父进程的内存</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">exec</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="err">为可执行文件</span><span class="n">ELF</span><span class="err">开辟内存</span><span class="p">,</span> <span class="err">当用户需要额外内存时</span><span class="p">(</span><span class="n">malloc</span><span class="p">)</span> <span class="err">调用</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">sbrk</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">I</span><span class="o">/</span><span class="n">O</span> <span class="n">and</span> <span class="n">File</span> <span class="n">Descriptors</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">File</span> <span class="nl">Descriptor</span><span class="p">:</span> <span class="n">a</span> <span class="n">small</span> <span class="n">integer</span> <span class="n">representing</span> <span class="n">a</span> <span class="n">kernel</span><span class="o">-</span><span class="n">managed</span> <span class="n">object</span> <span class="n">that</span> <span class="n">a</span> <span class="n">process</span> <span class="n">may</span> <span class="n">read</span> <span class="n">from</span> <span class="n">or</span> <span class="n">write</span> <span class="n">to</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">xv6</span><span class="err">中，所有的</span><span class="n">object</span><span class="err">都有</span><span class="n">file</span> <span class="n">descriptor</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">每一个进程都有</span><span class="n">private</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="n">table</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">系统调用</span><span class="o">:</span> <span class="err">读取</span><span class="n">fd</span><span class="err">中</span><span class="n">n</span><span class="err">个</span><span class="n">bytes</span><span class="err">到</span><span class="n">buf</span><span class="p">.</span> <span class="err">每个</span><span class="n">fd</span><span class="err">中都有一个</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">offset</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">，读取一次都会</span><span class="n">update</span> <span class="n">offset</span><span class="err">，以便下次继续读取</span><span class="p">.</span> <span class="err">若没什么可读了，返回</span><span class="mi">0</span><span class="err">，否则返回读取的字节数</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">系统调用：</span> <span class="err">向</span><span class="n">fd</span><span class="err">中写入</span><span class="n">buf</span><span class="err">里的</span><span class="n">n</span><span class="err">个</span><span class="n">bytes</span><span class="p">.</span> <span class="err">工作原理与</span><span class="n">read</span><span class="err">类似，也有</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">offset</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">举例（</span><span class="n">Cat</span><span class="err">的实现</span><span class="p">)</span><span class="o">:&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(;;){</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">buf</span><span class="p">));</span>  <span class="c1">// 从标准输入读</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>                       <span class="c1">// 输入结束</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>                       <span class="c1">// error</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;read error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">!=</span> <span class="n">n</span><span class="p">){</span>      <span class="c1">// 向标准输出写</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;write error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">close</span> <span class="err">系统调用会释放一个</span><span class="n">file</span> <span class="n">descriptor</span><span class="err">。</span> <span class="err">当有进程申请新的</span><span class="n">file</span> <span class="n">descriptor</span><span class="err">时，</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">数值最小的那个</span><span class="n">fd</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">会被分配给新的</span><span class="n">object</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">实现</span> <span class="n">I</span><span class="o">/</span><span class="n">O</span> <span class="err">重定向</span><span class="o">:</span> <span class="err">先用</span><span class="n">close</span><span class="err">释放一个</span><span class="n">file</span> <span class="n">descriptor</span><span class="err">，然后重新</span><span class="n">open</span><span class="err">一个文件，这样新的文件就拥有了释放掉的</span><span class="n">fd</span><span class="p">(</span><span class="err">因为总是从最小的</span><span class="n">fd</span><span class="err">开始分配</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="err">举例（实现</span><span class="n">cat</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">tinput</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span>    <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;cat&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 确保是在子进程里</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>      <span class="c1">// 释放fd 0</span>
</span><span class='line'>        <span class="n">open</span><span class="p">(</span><span class="s">&quot;input.txt&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span> <span class="c1">// assign fd0 to input.txt</span>
</span><span class='line'>        <span class="n">exec</span><span class="p">(</span><span class="s">&quot;cat&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>           <span class="c1">// 执行cat命令</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Fork</span> <span class="err">拷贝父进程的</span><span class="n">file</span> <span class="n">descriptor</span> <span class="n">table</span> <span class="err">到子进程</span><span class="p">.</span> <span class="n">exec</span><span class="err">在载入文件时依然会保留进程的</span><span class="n">file</span> <span class="n">descriptor</span> <span class="n">table</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">当父子进程同时操作一个</span><span class="n">fd</span><span class="err">时，</span><span class="n">fd</span><span class="err">中的</span><span class="n">offset</span><span class="err">是共享的</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span>    <span class="k">if</span><span class="p">(</span><span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;hello &quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">wait</span><span class="p">();</span>                  <span class="c1">// 确保先执行子进程再执行父进程</span>
</span><span class='line'>        <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">父进程写的</span><span class="n">word</span><span class="err">不会覆盖子进程写的</span><span class="n">hello</span><span class="p">.</span> <span class="err">因为</span><span class="n">offset</span><span class="err">是共享的</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">dup</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">系统调用</span><span class="o">:</span> <span class="err">复制当前</span><span class="n">fd</span><span class="err">，返回一个新的</span><span class="n">fd</span><span class="err">指向同一个</span><span class="n">Object</span><span class="p">.</span> <span class="n">dup</span><span class="err">出来的新</span><span class="n">fd</span><span class="err">共享之前</span><span class="n">fd</span><span class="err">的</span><span class="n">offset</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="o">&gt;</span>    <span class="n">fd</span> <span class="o">=</span> <span class="n">dup</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>                <span class="c1">// 复制fd 1</span>
</span><span class='line'>    <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;hello &quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">在不创建子进程的情况下，通过</span><span class="n">dup</span><span class="err">实现共享</span><span class="n">offset</span><span class="err">。除此之外</span><span class="n">offset</span><span class="err">不能共享</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Pipes</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">实现一个简单的</span><span class="n">Pipe</span><span class="p">,</span> <span class="n">wc</span> <span class="err">连接</span><span class="n">pipe</span><span class="err">的</span><span class="n">read</span> <span class="n">end</span>
</span></code></pre></td></tr></table></div></figure> c
int p[2];
char *argv[2];
argv[0] = &ldquo;wc&rdquo;;
argv[1] = 0;
pipe(p); // 创建pipe，在p中记录read和write fd
if(fork() == 0) { // 子进程
    close(0);
    dup(p[0]);    // fd0 被赋给p[0]指向的object
    close(p[0]);
    close(p[1]);  // p[1]必须在wc之前被close, 否则read end就不会结束
    exec(&ldquo;/bin/wc&rdquo;, argv); // execute wc on p[0]
} else {         // 父进程
    write(p[1], &ldquo;hello world\n&rdquo;, 12); // execute &ldquo;write hello world to p[1]&rdquo;
    close(p[0]);
    close(p[1]);
}</p>

<pre><code>
&gt; 上面代码中, p[0]: read end, p[1]: write end . 子进程必须在wc之前关闭p[1], 否则wc时read end一直等待所有指向write end的fd关闭.


* 如果pipe的read end没有数据, 则read end 要么是等待数据,要么等待所有指向write end的fd都关闭. 若后一种情况发生时，读到的是0，表示读到文件的结束了.
* 如何实现`fork sh.c | wc -l`
    * child process creates a pipe to connect the left end of the pipe with the right end.
    * child process calls **runcmd** for the left end of the pipeline
    * child process calls **runcmd** for the right end of the pipe
    * waits for the left and the right ends to finish by calling **wait** twice
* pipe 和 temp file的不同之处:
    * pipe 可以自动清理
    * tmp file需要空间，pipe不需要空间，传递的是data stream
    * pipe 可以 synchronization,一个process可以block read等到另一个process写完pipe，再读取.

-------
### File System
* **chdir** 系统调用: 改变当前工作目录
* **mkdir** 系统调用: 创建一个新的目录, 用**open**系统调用可以创建新的文件
* **mknod** 系统调用: 创建新的设备文件
</code></pre>

<pre><code>// chdir
chdir("/a");
chdir("b");
open("c", O_RDONLY);
// 另一种实现方法
open("/a/b/c", O_RDONLY);

// mkdir
mkdir("/dir");
fd = open("/dir/file", O_CREATE|O_WRONLY); // 创建文件
close(fd);

// mknod
mknod("/console", 1, 1); // 这两个数字分别是major and minor device number. 用来识别kernel deviced
</code></pre>

<pre><code>
* **fstat** 系统调用: 可以读取一个fd指向的object的信息. fstat 读取的数据结构定义如下
</code></pre>

<pre><code>#define T_DIR 1 // Directory
#define T_FILE 2 // File
#define T_DEV 3 // Device
struct stat {
    short type; // Type of file
    int dev; // File system’s disk device
    uint ino; // Inode number, OS里用来识别真实文件的, 一个innode 可以被Link到多个名字去
    short nlink; // Number of links to file
    uint size; // Size of file in bytes
</code></pre>

<p>};
&#8220;`</p>

<ul>
<li><strong>link</strong> 和 <strong>unlink</strong> 系统调用: 为已存在的文件创建一个“别名”，但是都指向相同的Innode.</li>
</ul>


<pre><code>    open("a", O_CREATE|O_WRONLY);
    link("a", "b");
    unlink("a");
</code></pre>
]]></content>
  </entry>
  
</feed>
