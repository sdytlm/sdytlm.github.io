<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 卖萌的弱渣]]></title>
  <link href="http://sdytlm.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://sdytlm.github.io/"/>
  <updated>2015-05-01T18:12:53-07:00</updated>
  <id>http://sdytlm.github.io/</id>
  <author>
    <name><![CDATA[Min Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python: Data Structure]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/12/python3/"/>
    <updated>2015-04-12T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/12/python3</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Functions on <code>list</code></h3>

<ul>
<li><p><strong>append(x)</strong>
Add an item to the end of the list.
<code>a[len(a)] = x</code></p></li>
<li><p><strong>extend(L)</strong>
Extend a list by appending all the items of given list <code>L</code>
<code>a[len(a):] = L</code></p></li>
<li><p><strong>insert(index, x)</strong>
Insert <code>x</code> before <code>a[index]</code></p></li>
</ul>


<pre><code>a.insert(0,x)         # Insert at the begining
a.insert(len(a),x)    # Insert at the end
</code></pre>

<ul>
<li><p><strong>remove(x)</strong>
Remove all values <code>x</code> from the list. If there is no value <code>x</code>, there will be an error</p></li>
<li><p><strong>pop(index)</strong></p></li>
</ul>


<p>Remove the item at the given position <code>index</code> in the list and return it.
But you can use <code>pop()</code> to return and remove the last item in the list</p>

<ul>
<li><p><strong>clear()</strong>
Remove all items from the list</p></li>
<li><p><strong>index(x)</strong>
Return the index of value <code>x</code> in the list. There will be an error if no such item.</p></li>
<li><p><strong>count(x)</strong>
Return the nuber of times value <code>x</code> appears in the list</p></li>
<li><p><strong>sort()</strong>
Sort the items of the list in place</p></li>
<li><p><strong>reverse()</strong>
Reverse the items of list in place</p></li>
<li><p><strong>copy()</strong>
Return a copy of the list</p></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; a = [66.25, 333, 333, 1, 1234.5]
&gt;&gt;&gt; print(a.count(333), a.count('x'))
2 0

&gt;&gt;&gt; a.insert(2, -1)        # add -1 before a[2]
&gt;&gt;&gt; a.append(333)         # andd 333 in the end
[66.25,333,-1,333,1,1234.5,333]

&gt;&gt;&gt; a.index(333)         # only search once
1
&gt;&gt;&gt; a.remove(333)        # delete once from left
[66.25, -1, 333, 1, 1234.5, 333]

&gt;&gt;&gt; a.reverse()
[333, 1234.5, 1, 333, -1, 66.25]

&gt;&gt;&gt; a.sort()
[-1,1,66.25, 333, 333, 1234.5]

&gt;&gt;&gt; a.pop()              # return and remove the last item
1234.5
&gt;&gt;&gt; a
[-1,1,66.25,333,333]
</code></pre>

<blockquote><p>Every method has return value. <code>insert</code>,<code>remove</code> and <code>sort</code> will return <code>None</code></p></blockquote>

<h3>Using Lists as Stacks</h3>

<p>Use <code>append()</code> and <code>pop()</code> to implement First in first out.</p>

<pre><code class="python">&gt;&gt;&gt; stack = [3,4,5]
&gt;&gt;&gt; stack.append(6)
&gt;&gt;&gt; stack.append(7)
&gt;&gt;&gt; stack
[3,4,5,6,7]
&gt;&gt;&gt; stack.pop()
7
&gt;&gt;&gt; stack
[3,4,5,6]
&gt;&gt;&gt; stack.pop()
6
&gt;&gt;&gt; stack.pop()
5
&gt;&gt;&gt; stack
[3,4]
</code></pre>

<h3>Using Lists as Queues</h3>

<p>To implement First in Last out, use <code>collections.deque</code></p>

<pre><code class="python">&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; queue = deque(['Eric", "John", "Michael"])
&gt;&gt;&gt; queue.append("Terry")        # Terry arrives 
&gt;&gt;&gt; queue.append("Graham")       # Graham arrives
&gt;&gt;&gt; queue.popleft()              # Eric left
'Eric'
&gt;&gt;&gt; queue.popleft()              # John left
'John'
&gt;&gt;&gt; queue
deque(['Michael', 'Terry', 'Graham'])
</code></pre>

<h3>List Comprehensions</h3>

<p>You can do</p>

<pre><code class="python">&gt;&gt;&gt; squares = []
&gt;&gt;&gt; for x in range(10):
        squares.append(x**2)

&gt;&gt;&gt; squares
[0,1,4,9,16,25,36,49,64,81]
</code></pre>

<p>or</p>

<pre><code class="python">&gt;&gt;&gt; squares = [x**2 for x in range(10)]
</code></pre>

<p>Another Example:</p>

<pre><code class="python">&gt;&gt;&gt; [(x,y) for x in [1,2,3] for y in [3,1,4] if x!=y]
[(1,3, (1,4), (2,3), (2,1), (2,4,) (3,1),(3,4)]
</code></pre>

<p>equivalent to</p>

<pre><code class="python">&gt;&gt;&gt; combos = []
&gt;&gt;&gt; for x in [1,2,3]:
        for(y in [3,1,4]:
            if x!=y:
                combs.append((x,y))
&gt;&gt;&gt; combs
[(1,3),(1,4),(2,3),(2,1),(2,4),(3,1),(3,4)]
</code></pre>

<p>More Examples:</p>

<pre><code class="python">&gt;&gt;&gt; vec = [-4,-2,0,2,4]
&gt;&gt;&gt; # create a new list with values doubled
&gt;&gt;&gt; [x*2 for x in vec]
[-8,-4,0,4,8]
&gt;&gt;&gt; # filter the list to exclude negative nums
&gt;&gt;&gt; [x for x in vec if x&gt;=0]
[0,2,4]
&gt;&gt;&gt; # call a method on each element
&gt;&gt;&gt; freshfruit =['banana', 'loganberry','passion fruit']
&gt;&gt;&gt; [weapon.strip() for weapon in freshfruit]
['banana','loganberry',passion fruit']
&gt;&gt;&gt; create a 2-tuple, you must have `()`
&gt;&gt;&gt; [(x, x**2) for x in range(6)]
[(0,0),(1,1),(2,4),(3,9),(4,16),(5,25)]
&gt;&gt;&gt; # two 'for'
&gt;&gt;&gt; vec = [[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; [num for elem in vec for num in elem]
[1,2,3,4,5,6,7,8,9]
</code></pre>

<h3>Nested List Comprehension</h3>

<p>Implement a 3x4 matrix</p>

<pre><code class="python">&gt;&gt;&gt; matrix = [
        [1,2,3,4],
        [5,6,7,8],
        [9,10,11,12],
    ]
</code></pre>

<p>The following will switch the row and column.</p>

<pre><code class="python">&gt;&gt;&gt; [[row[i] for row in matrix] for i in range(4)]
[[1,5,9],[2,6,10],[3,7,11],[4,8,12]] 
</code></pre>

<p>This code is also equal to</p>

<pre><code class="python">&gt;&gt;&gt; new_matrix = [];
&gt;&gt;&gt; for i in range(4);
        new_matrix.append([row[i] for row in matrix])

&gt;&gt;&gt; new_matrix
[[1,5,9],[2,6,10],[3,7,11],[4,8,12]]
</code></pre>

<blockquote><p>The built-in function <code>zip()</code> can provide the same functionality.</p></blockquote>

<pre><code class="python">&gt;&gt;&gt; list(zip(*matrix))
[(1,5,9),(2,6,10),(3,7,11),(4,8,12)]
</code></pre>

<h3>The del statement</h3>

<p>Remove an item from a given list by a index.</p>

<pre><code class="python">&gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; del a[0]
&gt;&gt;&gt; a
[1, 65.25, 333, 333, 1234.5]      # delete a[2] and a[3]
&gt;&gt;&gt; del a[2:4]       
&gt;&gt;&gt; a
[1,66.25, 1234.5]
</code></pre>

<p>Delete an entire list</p>

<pre><code class="python">del a 
or 
del a[:]
</code></pre>

<h3>Tuples and Sequences</h3>

<p>The tuples is always enclosed in parentheses. Nested tuple is correct.
The elements in Tuples can not be changed.</p>

<pre><code class="python">&gt;&gt;&gt; t = 12345, 54321, 'hello!'
t
(12345, 54321, 'hello!')

&gt;&gt;&gt; u = t, (1,2,3,4,5)         # nested tuple
&gt;&gt;&gt; u
((12345, 54321, 'hello!'), (1,2,3,4,5))
&gt;&gt;&gt; t[0] = 888         # Wrong !
&gt;&gt;&gt; v = ([1,2,3],[3,2,1])
</code></pre>

<p>You can build empty tuple and comma is not considered when you calculate the length of tuple</p>

<pre><code class="python">&gt;&gt;&gt; empty = ()
&gt;&gt;&gt; singlenton = 'hello',
&gt;&gt;&gt; len(empty)
0
&gt;&gt;&gt; len(singleton)
1
&gt;&gt;&gt; 
</code></pre>

<h3>Sets</h3>

<ul>
<li>No duplicate elements</li>
<li>Elements are unordered</li>
</ul>


<blockquote><p>To create an empty set, you have to use <code>set()</code>. If you do <code>{}</code>, you will create an empty dictionary.</p></blockquote>

<pre><code class="python">&gt;&gt;&gt; basket = {'apple', 'orange', 'apple', 'pear', 'banana'}   # {} can be used to create un empty dictionary
&gt;&gt;&gt; print(basket)
{'orange','banana','pear','apple'}
</code></pre>

<ul>
<li>Set support fast membership testing</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 'orange' in basket
True
&gt;&gt;&gt; 'haha" in basket
False
</code></pre>

<ul>
<li>Set support <code>-</code>, <code>|</code>, <code>&amp;</code>, <code>^</code> operations</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; a = set('abracadabra')
&gt;&gt;&gt; b = set('alacazam')
&gt;&gt;&gt; a
{'a','r','b','c','d'}
&gt;&gt;&gt; a-b                       # letters in a but not in b
{'r','d','b'}
&gt;&gt;&gt; a | b                     # letters in either a or b
{'a','c','r','d','b','m','z','l'}
&gt;&gt;&gt; a &amp; b                     # letters in both a and b
{'a','c'}
&gt;&gt;&gt; a ^ b                     # letters in a or b but not both
{'r','d','b','m','z','l'}
</code></pre>

<h3>Dictionaries</h3>

<ul>
<li>Indexed by unique Keys. Key must be <code>immutable</code> type. List cannot be used as key.</li>
<li>Check if a key is in the dictionary by using the <code>in</code> keyword</li>
<li>List all keys by <code>list(d.keys())</code> or <code>sorted(d.keys())</code></li>
<li>Each element in dictionary is <code>key:value</code> separated by comma</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; tel = {'jack':4098, 'sape:4139}
&gt;&gt;&gt; tel['guido'] = 4127                # add a new one element
&gt;&gt;&gt; tel
{'sape':4139, 'guido':4127, 'jack':4098}
&gt;&gt;&gt; tel['jack']
4098
&gt;&gt;&gt; del tel['sape']                    # delete an element
&gt;&gt;&gt; tel['irv'] = 4127
&gt;&gt;&gt; tel
{'guido':4127, 'irv':4127, 'jack':4098}
&gt;&gt;&gt; list(tel.keys())
['irv','guido','jack']
&gt;&gt;&gt; 'guido' in tel
True
</code></pre>

<p><code>dict()</code> can build dictionaries from sequences of key-value pairs:</p>

<pre><code class="python">&gt;&gt;&gt; dict([('sape',4139),('guido',4127),('jack',4098)])
{'sape':4139, 'jack':4098, 'guido':4127}
</code></pre>

<p>You can create dictionaries with expressions</p>

<pre><code class="python">&gt;&gt;&gt; {x: x**2 for x in (2,4,6)}
{2:4, 4:16, 6:36}
</code></pre>

<p>If your keys are string, you can also do this</p>

<pre><code class="python">&gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)
{'sape':4139, 'jack':4098, 'guido':4127}
</code></pre>

<h3>Looping</h3>

<ul>
<li>For dictionaries, Retrieve the key and value at the same time by using <code>items()</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; knights = {'gallahad': 'the pure', 'robin': 'the brave'}
&gt;&gt;&gt; for k, v in knights.items();
    print(k,v)
gallahad the pure
robin the brave
</code></pre>

<ul>
<li>For a sequence, the position index and corresponding value can be retrieved at the same time using <code>enumerate()</code> function</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; for i,v in enumerate(['tic', 'tac', 'toe'])
    print(i,v)
0 tic
1 tac
2 toe
</code></pre>

<ul>
<li>To loop over two or more sequences at the same time, entries can be paired with the <code>zip()</code> function.</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; questions = ['name', 'quest', 'favorite color']
&gt;&gt;&gt; answers = ['lancelot', 'the holy grail','blue']
&gt;&gt;&gt; for q, a in zip(questions, answers):
        print('What is your {0}? It is {1}.'.format(q,a))
What is your name? It is lancelot.
What is your quest? It is holy grail.
What is your favorite color? It is blue.
</code></pre>

<ul>
<li>To loop over a sequence in reverse,  call <code>reversed()</code> function</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; for i in reversed(range(1,10,2)):
        print(i)
9
7
5
3
1
</code></pre>

<ul>
<li><code>Sorted()</code> function can loop over a sequence in sorted order and return a new sorted list while leaving source unaltered.</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
&gt;&gt;&gt; for f in sorted(set(basket)):
        print(f)
apple
banana
orange
pear
</code></pre>

<h3>Conditinos</h3>

<ul>
<li><code>is</code> and <code>is not</code> compare whether two objects are the same.</li>
<li><code>in</code> and <code>not in</code> check whether a value occur in a sequence.</li>
<li>Comparision can be chained</li>
</ul>


<pre><code class="python">a &lt; b == c         # a&lt;b &amp;&amp; b&lt;c
</code></pre>

<ul>
<li>If you compare two sequence object with same type. It will use <code>lexicographical</code> ordering to compare them. The longer, the larger.</li>
</ul>


<pre><code class="python">(1,2,3) &lt; (1,2,4)
'ABC' &lt; 'C' &lt; 'Pascal' &lt; 'Python'
(1,2,3,4) &lt; (1,2,4)
(1.0,2.0) == (1.0,2.0,3.0)
(1,2,) &lt; ( 1,2,-1)
(1,2,('aa','ab')) &lt; (1,2,('abc','a'),4)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Control Flow]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/09/python2/"/>
    <updated>2015-04-09T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/09/python2</id>
    <content type="html"><![CDATA[<h3>First Steps</h3>

<pre><code class="python">&gt;&gt;&gt; a,b = 0,1
&gt;&gt;&gt; while b&lt;10:
    print(b)
    a,b=b,a+b
</code></pre>

<blockquote><p>each line within a basic block must be idented by the same amount.</p></blockquote>

<ul>
<li>Use keyword <code>end</code> to avoid the newline after output.</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; a,b = 0,1
&gt;&gt;&gt; while b&lt;1000:
    print(b,end=',')     # specify what character is used after output.
    a,b = b,a+b
1,1,2,3,5,8,
</code></pre>

<!--more-->


<hr />

<h3>If Statement</h3>

<ul>
<li><code>elif</code> and <code>else</code> part is optional</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; x = int (input("Please enter an integer: "))  # Defulat input will return a string
Please enter an integer: 42
&gt;&gt; if x &lt; 0:
        x = 0
    elif x == 0:
        print('Zero')
    elif x == 1:
        print('Single')
    else:
        print('More')
More
</code></pre>

<hr />

<h3>For Statement</h3>

<ul>
<li>Iterates the items of a <code>list</code> or <code>string</code> in the order they appear.</li>
</ul>


<pre><code class="python">words = ['cat', 'window', 'defenestrate']   # list
&gt;&gt;&gt; for w in words:
    print(w, len(w))
cat 3
window 6
defenestrate 12
</code></pre>

<ul>
<li>if you modify the sequence, you may create a dead loop program</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; words = ['cat', 'window', 'defenestrate']
&gt;&gt;&gt; for w in words[:]:        # word[:] will not make the program dead loop. If u use words, program will be dead loop
        if len(w) &gt; 6:
            words.insert (0,w)
&gt;&gt;&gt; words
['defenestrate', 'cat', 'window', 'defenestrate']
</code></pre>

<hr />

<h3><code>range()</code> Function</h3>

<p>It can generates arithmetic progressions:
&#8220;` python</p>

<blockquote><blockquote><blockquote><p>for i in range(5)
   print(i)
0
1
2
3
4
5</p></blockquote></blockquote></blockquote>

<pre><code>You can also specify the start index and step
</code></pre>

<blockquote><blockquote><blockquote><p>range(5,10)                  # 5,6,7,8,9
range(0,10,3)                # 0,3,6,9
range(-10,-100,-30)          # -10,-40,-70
<code>
You can combine `range()` and `len()`
</code> python
a = [&lsquo;Mary&rsquo;, &lsquo;had&rsquo;, &lsquo;a&rsquo;, &lsquo;little&rsquo;, &lsquo;lamb&rsquo;]
for i in range(len(a)):
  print(i,a[i])
0 Mary
1 had
2 a
3 little
4 lamb</p>

<h2>&#8220;`</h2>

<h3>Break Statement</h3></blockquote></blockquote></blockquote>

<ul>
<li>Loop statement can have <code>else</code> clause. It is executed when loop terminates through exhaustion of list (<code>for</code>) or when condition becauses false (<code>while</code>)</li>
</ul>


<blockquote><p><code>else</code> of loop statement cannot executed when loop is terminated by a <code>break</code> statement.</p></blockquote>

<pre><code class="python">&gt;&gt;&gt; for n in range(2,10):
&gt;&gt;&gt;     for x in range(2,n):
&gt;&gt;&gt;         if n%x == 0:
&gt;&gt;&gt;             print(n, 'equals',x,'*', n//x)
&gt;&gt;&gt;             break
&gt;&gt;&gt;     else:  # look at this intentation
&gt;&gt;&gt;         print(n, 'is a prime number')

2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
</code></pre>

<ul>
<li><code>continue</code> statement continues with the next iteration of the loop</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; for num in range (2,10):
&gt;&gt;&gt;     if num % 2 == 0:
&gt;&gt;&gt;         print("Found an even number", num)
&gt;&gt;&gt;         continue                            # if 'if' is executed, the second print will not be executed.
&gt;&gt;&gt;     print("Found a number", num)

Found an even number 2
Found a number 3
Found an even number 4
Found a number 5
Found an even number 6
Found a number 7
Found an even number 8
Found a number 9
</code></pre>

<hr />

<h3>Pass Statement</h3>

<p>It does nothing.</p>

<pre><code class="python">&gt;&gt;&gt; while True:
        pass # dead loop
</code></pre>

<hr />

<h3>Define Functions</h3>

<pre><code class="python">&gt;&gt;&gt; def fib(n):      # write Fibonacci series
        a,b = 0,1
        while a &lt; n:
            print(a, end=' ')
            a,b = b, a+b
        print()
&gt;&gt;&gt; # Call the function
    fib(2000)
</code></pre>

<ul>
<li>Execution of a function introduces a new symbol table for local variables. All function parameters will be stored in this table.</li>
<li>When you pass the arguments some values, the values are always the object <code>reference</code>  not the value of the object</li>
<li>A function definition introduces the function name in current symbol stable. You can also assign the function name to other parameter</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; fib
&lt;function fib at 10042ed0&gt;
&gt;&gt;&gt; f = fib
&gt;&gt;&gt; f(100)                  # same as fib(100)
</code></pre>

<ul>
<li>Actually, each function has a return value. At least it is <code>None</code></li>
</ul>


<pre><code class="python">print(fib(0))
None
</code></pre>

<p>Lets change the fib functions to store the reurn value temporally</p>

<pre><code class="python">&gt;&gt;&gt; def fib2(n):
        result = []     # store the result value
        a,b = 0,1
        while a &lt; n:
            result.append(a)        # the method we use to add the 
            a,b = b,a+b
        return result
&gt;&gt;&gt; f100 = fib2(100)    # call the function
&gt;&gt;&gt; f100
[0,1,1,2,3,5,8,13,21,34,55,89]
</code></pre>

<ul>
<li>Specify a default value for one or more arguments</li>
</ul>


<pre><code class="python">def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
    while True:
        ok = input(prompt)
        if ok in ('y','ye','yes'):                  # in can test if ok is in a sequence
            return True
        if ok in ('n','no','nop','nope'):
            return False
        retries = retries - 1
        if retries &lt; 0:
            raise OSError('uncooperative user')
        print(complaint)
</code></pre>

<blockquote><p>The default value is evaluated only once.</p></blockquote>

<pre><code class="python">&gt;&gt;&gt; def f(a, L=[]):          # L = [] will only be done once.
        L.append(a)
        return L

&gt;&gt;&gt; print(f(1))
&gt;&gt;&gt; print(f(2))
&gt;&gt;&gt; print(f(3))

[1]
[1, 2]
[1,2,3]
</code></pre>

<p>If you don&rsquo;t want the default to be shared.</p>

<pre><code class="python">&gt;&gt;&gt; def f(a, L=None):
        if L is None:    # `is` 
            L = []
        L.append(a)
        return L
</code></pre>

<hr />

<h3>More Function Parameter Rules</h3>

<ul>
<li>Keyword argument: <code>parrot(voltage=1000)</code></li>
<li>Positional argument: <code>parrot(1000)</code></li>
</ul>


<blockquote><p>If you have default parameter in your function. You can choose not to pass value to the default parameter. But you still need to pass values to other regular parameters.</p></blockquote>

<pre><code class="python">def parrot(voltage, state ='a stiff', actoon='voom', type='Blue'):
</code></pre>

<p>The function can be called as</p>

<pre><code class="python">parrot(1000)                                 # 1 positional argument
parrot(voltage=1000)                         # 1 keyword argument
parrot(voltage=1000,'action='VBOOM')
parrot(action='VBoom', voltage=1000)         # The order of keyword parameter is not important
parrot('a million', 'berere', 'jump')
parrot('a thousand', state='fdaf')
</code></pre>

<p>But the following is not acceptable</p>

<pre><code class="python">parrot()      # require keyword argument
parrot(voltage=5.0, 'dead')    # After keyword argument, you must use keyword argument
parrot(1000,voltage=220)       # duplicate value for the same arguement
</code></pre>

<ul>
<li>You define <code>*name</code> and <code>**name</code>. But <code>*name</code> must be put before <code>**name</code></li>
</ul>


<pre><code class="python">def test(kind, *arguments, **keywords):
    print("Do you have", kind, "?")
    for arg in arguments:
        print(arg)
    key = sorted(keywords.keys())       # sort the dictionary
    for kw in keys:
        print(kw, ":", keywords[kw])
</code></pre>

<p>Call it like this
<code>python
test("Limburger",
     "It's very runny",
     "It's very very runny"       # this two parameters will be sent to *arguments
     shopkeeper="Michael"
     client="John"
    sketch="Cheese")             # this three will be sent to **keywords
</code>
It will display</p>

<pre><code>Do you have Limburger?
It's very runny,
It's very very runny
client:john
shopkeeper:Michael
sketch:Cheese
</code></pre>

<ul>
<li>Arbitrary argument, after <code>*args</code>, must use keywords rather than positional arguments.</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; def concat (*args, sep="/"):          # after *args, you must use keywrod instead of positional arguments
    return sep.join(args)
&gt;&gt;&gt; concat("earth", "mars", "venus")
'earth/mars/venus'
&gt;&gt;&gt; concat("earth", "mars",sp=".")
'earth/mars/
</code></pre>

<ul>
<li>Call function with unpacked arguments</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; list(range(3,6)    # normal call with separate arguments
[3,4,5]
&gt;&gt;&gt; args = [3,6]
&gt;&gt;&gt; list(range(*args)) # call with arguments unpacked
[3,4,5]
</code></pre>

<ul>
<li>call function with dictionary to deliver arguments</li>
</ul>


<pre><code class="python">&gt;&gt;&gt;def parrot(voltage, state='a stiff', action='voom'):

&gt;&gt;&gt; d ={"voltage": "four million", "state": "demised", "action": "voom"}
&gt;&gt;&gt; parrot(**d)
</code></pre>

<ul>
<li>Lambda Expressions</li>
</ul>


<p><code>lambda</code> keyword can define a single expressions</p>

<pre><code class="python">&gt;&gt;&gt; def make_incrementor(n):
        return lambda x: x+n          # define a function return x+n
&gt;&gt;&gt; f = make_incrementor(42)
&gt;&gt;&gt; f(0)
42
&gt;&gt;&gt; f(1)
43
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: Introduction]]></title>
    <link href="http://sdytlm.github.io/blog/2015/04/06/python1/"/>
    <updated>2015-04-06T00:00:00-07:00</updated>
    <id>http://sdytlm.github.io/blog/2015/04/06/python1</id>
    <content type="html"><![CDATA[<h3>Study Resource</h3>

<ul>
<li>Python Official Document: <a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf">http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf</a></li>
<li>Python Standard Library: <a href="https://docs.python.org/2/library/index.html#library-index">https://docs.python.org/2/library/index.html#library-index</a></li>
<li>Python Official Tutorial: <a href="https://docs.python.org/2/tutorial/index.html">https://docs.python.org/2/tutorial/index.html</a></li>
</ul>


<h3>Features</h3>

<ul>
<li>Advancced Data Structure</li>
<li>Rely on <code>indentation</code>  (- -!)</li>
<li>No declaration for parameters</li>
</ul>


<!--more-->


<h3>Interpreter</h3>

<ul>
<li>Boot with a script</li>
</ul>


<pre><code class="python">python test.py
</code></pre>

<ul>
<li>Boot with command</li>
</ul>


<pre><code class="python">python -c command [arg]
</code></pre>

<ul>
<li>Boot with module</li>
</ul>


<pre><code class="python">python -m module [arg]
</code></pre>

<blockquote><p>Module name and command parameters are stored in <code>sys.argv[]</code></p></blockquote>

<ul>
<li><p>Make your python script executable</p>

<ul>
<li>Add the following in the first line</li>
</ul>
</li>
</ul>


<pre><code class="python">#! /usr/bin/env python3.4
</code></pre>

<ul>
<li>Give your file execution permission</li>
</ul>


<pre><code>chmod +x yourpython.py
</code></pre>

<ul>
<li>Use special character encoding
Add the following in the first or second line for Windows 1252</li>
</ul>


<pre><code># -*- coding: cp-1252 -*-
</code></pre>

<hr />

<h3>Basic Introduction</h3>

<h4>Number</h4>

<ul>
<li>Division will not dismiss fractional part</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 8/5
1.6
</code></pre>

<ul>
<li>If you do not like fractional part, use <code>//</code>.</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 7//3
2
&gt;&gt; 7//-3
-3
</code></pre>

<ul>
<li>Python will transfer int to float if your expression has both of them.</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 3 * 3.75 / 1.5
7.5
&gt;&gt;&gt; 7.0/2
3.5
</code></pre>

<hr />

<h4>Assignment</h4>

<pre><code class="python">&gt;&gt;&gt; width = 20
&gt;&gt;&gt; x = y = z = 10          # Assign multiple var with same value
&gt;&gt;&gt; x
10
&gt;&gt;&gt; y
10
</code></pre>

<ul>
<li>The last printed expression is assigned to the variable <code>_</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; tax = 12.5 / 100
&gt;&gt;&gt; price = 100.50
&gt;&gt;&gt; price * tax
12.5625
&gt;&gt;&gt; price + _
113.0625
&gt;&gt;&gt; round(_, 2)
113.06

&gt; `_` variable is read-only by the user.
</code></pre>

<ul>
<li>You can also do the multiple assignment</li>
</ul>


<pre><code class="python">a,b = 0,1   # a=0, b=1
</code></pre>

<hr />

<h4>Parameter</h4>

<blockquote><p>Must define the parameter before you access it</p></blockquote>

<p>For example:</p>

<pre><code class="python">&gt;&gt;&gt; n
NameError: xxxxxxxxx
</code></pre>

<hr />

<h4>String</h4>

<p>String can be expressed in &lsquo; &rsquo; or &ldquo; &rdquo;</p>

<ul>
<li>If you use &ldquo; &lsquo; &rdquo; or &rsquo; &ldquo; &lsquo;, the inside quote will be considered quote. Otherwise, you need use <code>\</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 'eggs'
'spam eggs'
&gt;&gt;&gt; 'doesn\'t'     # use \' to represent single quote because this is ' ' '
"doesn't:
&gt;&gt;&gt; '"Yes," he said.'  # you don't need \" because it's ' " '
'"Yes," he said.'
&gt;&gt;&gt; "\"Yes,\" he said."  # you have to use \" for ", because this is " " "
'"Yes," he said.'
&gt;&gt;&gt; '"Isn\'t," she said,'
'"Isn\'t," she said.'
</code></pre>

<ul>
<li>print() will handle &lsquo;\&rsquo; as special character</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; '"Isn\'t," she said.'
'"Isn\'t," she said.'
&gt;&gt;&gt; print('"Isn'\t,"she said.')
"Isn't," she said.         # \ will not be displayed
&gt;&gt;&gt; s = 'First line, \nSecond line.'
'First line, \nSecond line.'
&gt;&gt;&gt; print(s)
First line,
Second line.
</code></pre>

<blockquote><p>If you want python accpet \, you need to add <code>r</code> before the first quote</p></blockquote>

<pre><code>&gt;&gt; print('C:\some\name')
C:\some
ame
&gt;&gt;&gt; print(r'C:\some\name')
C:\some\name
</code></pre>

<ul>
<li>print() can display multiple line by using &ldquo; &rdquo; &#8221;</li>
</ul>


<pre><code class="python">print("""\
Usage: thingy
       -h
      -H
""")
</code></pre>

<p>Output is the same format as this input</p>

<ul>
<li>String can be concatenated with <code>+</code> and repeated with <code>*</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 3 * 'un' + 'iun'
'unununiun'
</code></pre>

<ul>
<li>String literals next to each other are automatically concatenated</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; 'Py' 'thon'
'Python'
</code></pre>

<blockquote><p>This automatical concatenation Cannot concatenate a variable and a string</p></blockquote>

<pre><code class="python">&gt;&gt;&gt; prefix = 'Py'
&gt;&gt;&gt; prefix 'thon'
SyntaxError: invalid syntax
</code></pre>

<p>But <code>+</code> still works</p>

<pre><code class="python">&gt;&gt;&gt; prefix ='Py'
&gt;&gt;&gt; prefix + 'thon'
'Python'
</code></pre>

<ul>
<li>String can be indexed starting from 0. string[0] is also string type</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word = "Python"
&gt;&gt;&gt; word[0]
'P'
&gt;&gt;&gt; word[5]
'n'
</code></pre>

<ul>
<li>Indices may also be negative numbers which start counting from the <code>right</code>, negative indices starts from <code>-1</code></li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word[-1]
'n'
&gt;&gt;&gt; word[-2]
'o'
&gt;&gt;&gt; word[-6]
'P'
</code></pre>

<ul>
<li>Slicing is supported in string. We can get substring by slicing</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word='Python'
&gt;&gt;&gt; word[0:2]    # get characters [0,2)
'Py'
&gt;&gt;&gt; word[:2]
'Py'
&gt;&gt;&gt; word[4:]    # get characters [4,length]
'on'
&gt;&gt;&gt; word[-2:]
'on'
&gt;&gt;&gt; word[:2] + word[2:]
'Python'
</code></pre>

<ul>
<li>Attempting to use a index that is too large will result in error</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word='Python'
&gt;&gt;&gt; word[42]
IndexError: string index out of range
</code></pre>

<p>But slice index is ok for this</p>

<pre><code class="python">&gt;&gt;&gt; word='Python'
&gt;&gt;&gt; word[4:42]
'on'
&gt;&gt;&gt; word[42:]
' '
</code></pre>

<ul>
<li>Python strings cannot be changed</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; word[0] = 'J'
TypeError: 'str' does not support item assign
</code></pre>

<blockquote><p>If you need a different string, you have to create a new one</p></blockquote>

<ul>
<li>Function <code>len()</code> returns the length of a string</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; s = 'abcdefg'
&gt;&gt;&gt; len(s)
7
</code></pre>

<hr />

<h4>Lists</h4>

<ul>
<li>Lists can contain items of different types, but usually the items have the same type</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; squares = [1,4,9,16,25]
&gt;&gt;&gt; squares
[1,4,9,16,25]
</code></pre>

<ul>
<li>Lists can also be indexed and sliced:</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; squares = [1,4,9,16,25]
&gt;&gt;&gt; squares[0]
1
&gt;&gt;&gt; square[-1]
25
&gt;&gt;&gt; squares[-3:]            // slice will return a new list
[9,16,25]
</code></pre>

<ul>
<li>List can also be concatenated</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; squares = [1,4,9,16,25]
&gt;&gt;&gt; squares + [36,49,64,81,100]
[1,4,9,16,25,36,49,64,81,100]
</code></pre>

<ul>
<li>Strings cannot be changed, but list can be changed</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; cubes = [1,8,27,65,125]
&gt;&gt;&gt; cubes[3] = 64
&gt;&gt;&gt; cubes
[1,8,27,64,125]
</code></pre>

<ul>
<li>You can add new items at the ned of list by append()</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; cubes = [1,8,27,64,125]
&gt;&gt;&gt; cubes.append(216)
&gt;&gt;&gt; cubes.append(7**3)
&gt;&gt;&gt; cubes
[1,8,27,64,125,216,343]
</code></pre>

<ul>
<li>You can even change the size of list or clear it by assignment to slices</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; letters = ['a','b','c','d','e','f','g']
&gt;&gt;&gt; letters[2:5] = ['C','D','E']
&gt;&gt;&gt; letters
['a','b','C','D','E','f','g']
# remove them
&gt;&gt;&gt; letters[2:5] = []
&gt;&gt;&gt; letters
['a','b','f','g']
&gt;&gt;&gt; letters[:] = []
&gt;&gt;&gt; letters
[]
</code></pre>

<ul>
<li><code>len()</code> can applies to lists</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; letters = ['a','b','c','d']
&gt;&gt;&gt; len(letters)
4
</code></pre>

<ul>
<li>A lists can contain other lists</li>
</ul>


<pre><code class="python">&gt;&gt;&gt; a = ['a','b','c']
&gt;&gt;&gt; n = [1,2,3,]
&gt;&gt;&gt; x= [a,n]
&gt;&gt;&gt; x
[['a','b','c'],[1,2,3]]
&gt;&gt;&gt; x[0]
['a','b','c']
&gt;&gt;&gt; x[0][1]                 # like two dimention array
'b'
</code></pre>
]]></content>
  </entry>
  
</feed>
